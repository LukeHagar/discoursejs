/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type DeletePostRequestBody = {
  /**
   * The `SiteSetting.can_permanently_delete` needs to be enabled first before this param can be used. Also this endpoint needs to be called first without `force_destroy` and then followed up with a second call 5 minutes later with `force_destroy` to permanently delete.
   */
  forceDestroy?: boolean | undefined;
};

export type DeletePostRequest = {
  requestBody?: DeletePostRequestBody | undefined;
  id: number;
};

/** @internal */
export const DeletePostRequestBody$inboundSchema: z.ZodType<
  DeletePostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  force_destroy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "force_destroy": "forceDestroy",
  });
});

/** @internal */
export type DeletePostRequestBody$Outbound = {
  force_destroy?: boolean | undefined;
};

/** @internal */
export const DeletePostRequestBody$outboundSchema: z.ZodType<
  DeletePostRequestBody$Outbound,
  z.ZodTypeDef,
  DeletePostRequestBody
> = z.object({
  forceDestroy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    forceDestroy: "force_destroy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePostRequestBody$ {
  /** @deprecated use `DeletePostRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeletePostRequestBody$inboundSchema;
  /** @deprecated use `DeletePostRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeletePostRequestBody$outboundSchema;
  /** @deprecated use `DeletePostRequestBody$Outbound` instead. */
  export type Outbound = DeletePostRequestBody$Outbound;
}

/** @internal */
export const DeletePostRequest$inboundSchema: z.ZodType<
  DeletePostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => DeletePostRequestBody$inboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeletePostRequest$Outbound = {
  RequestBody?: DeletePostRequestBody$Outbound | undefined;
  id: number;
};

/** @internal */
export const DeletePostRequest$outboundSchema: z.ZodType<
  DeletePostRequest$Outbound,
  z.ZodTypeDef,
  DeletePostRequest
> = z.object({
  requestBody: z.lazy(() => DeletePostRequestBody$outboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePostRequest$ {
  /** @deprecated use `DeletePostRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePostRequest$inboundSchema;
  /** @deprecated use `DeletePostRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePostRequest$outboundSchema;
  /** @deprecated use `DeletePostRequest$Outbound` instead. */
  export type Outbound = DeletePostRequest$Outbound;
}
