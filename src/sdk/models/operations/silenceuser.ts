/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type SilenceUserRequestBody = {
  /**
   * Will send an email with this message when present
   */
  message?: string | undefined;
  postAction?: string | undefined;
  reason?: string | undefined;
  silencedTill?: string | undefined;
};

export type SilenceUserRequest = {
  requestBody?: SilenceUserRequestBody | undefined;
  id: number;
};

export type SilencedBy = {
  avatarTemplate: string;
  id: number;
  name: string;
  username: string;
};

export type Silence = {
  silenceReason: string;
  silenced: boolean;
  silencedAt: string;
  silencedBy: SilencedBy;
  silencedTill: string;
};

/**
 * response
 */
export type SilenceUserResponseBody = {
  silence: Silence;
};

/** @internal */
export const SilenceUserRequestBody$inboundSchema: z.ZodType<
  SilenceUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  post_action: z.string().optional(),
  reason: z.string().optional(),
  silenced_till: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "post_action": "postAction",
    "silenced_till": "silencedTill",
  });
});

/** @internal */
export type SilenceUserRequestBody$Outbound = {
  message?: string | undefined;
  post_action?: string | undefined;
  reason?: string | undefined;
  silenced_till?: string | undefined;
};

/** @internal */
export const SilenceUserRequestBody$outboundSchema: z.ZodType<
  SilenceUserRequestBody$Outbound,
  z.ZodTypeDef,
  SilenceUserRequestBody
> = z.object({
  message: z.string().optional(),
  postAction: z.string().optional(),
  reason: z.string().optional(),
  silencedTill: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postAction: "post_action",
    silencedTill: "silenced_till",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SilenceUserRequestBody$ {
  /** @deprecated use `SilenceUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = SilenceUserRequestBody$inboundSchema;
  /** @deprecated use `SilenceUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = SilenceUserRequestBody$outboundSchema;
  /** @deprecated use `SilenceUserRequestBody$Outbound` instead. */
  export type Outbound = SilenceUserRequestBody$Outbound;
}

/** @internal */
export const SilenceUserRequest$inboundSchema: z.ZodType<
  SilenceUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => SilenceUserRequestBody$inboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SilenceUserRequest$Outbound = {
  RequestBody?: SilenceUserRequestBody$Outbound | undefined;
  id: number;
};

/** @internal */
export const SilenceUserRequest$outboundSchema: z.ZodType<
  SilenceUserRequest$Outbound,
  z.ZodTypeDef,
  SilenceUserRequest
> = z.object({
  requestBody: z.lazy(() => SilenceUserRequestBody$outboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SilenceUserRequest$ {
  /** @deprecated use `SilenceUserRequest$inboundSchema` instead. */
  export const inboundSchema = SilenceUserRequest$inboundSchema;
  /** @deprecated use `SilenceUserRequest$outboundSchema` instead. */
  export const outboundSchema = SilenceUserRequest$outboundSchema;
  /** @deprecated use `SilenceUserRequest$Outbound` instead. */
  export type Outbound = SilenceUserRequest$Outbound;
}

/** @internal */
export const SilencedBy$inboundSchema: z.ZodType<
  SilencedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar_template: z.string(),
  id: z.number().int(),
  name: z.string(),
  username: z.string(),
}).transform((v) => {
  return remap$(v, {
    "avatar_template": "avatarTemplate",
  });
});

/** @internal */
export type SilencedBy$Outbound = {
  avatar_template: string;
  id: number;
  name: string;
  username: string;
};

/** @internal */
export const SilencedBy$outboundSchema: z.ZodType<
  SilencedBy$Outbound,
  z.ZodTypeDef,
  SilencedBy
> = z.object({
  avatarTemplate: z.string(),
  id: z.number().int(),
  name: z.string(),
  username: z.string(),
}).transform((v) => {
  return remap$(v, {
    avatarTemplate: "avatar_template",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SilencedBy$ {
  /** @deprecated use `SilencedBy$inboundSchema` instead. */
  export const inboundSchema = SilencedBy$inboundSchema;
  /** @deprecated use `SilencedBy$outboundSchema` instead. */
  export const outboundSchema = SilencedBy$outboundSchema;
  /** @deprecated use `SilencedBy$Outbound` instead. */
  export type Outbound = SilencedBy$Outbound;
}

/** @internal */
export const Silence$inboundSchema: z.ZodType<Silence, z.ZodTypeDef, unknown> =
  z.object({
    silence_reason: z.string(),
    silenced: z.boolean(),
    silenced_at: z.string(),
    silenced_by: z.lazy(() => SilencedBy$inboundSchema),
    silenced_till: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "silence_reason": "silenceReason",
      "silenced_at": "silencedAt",
      "silenced_by": "silencedBy",
      "silenced_till": "silencedTill",
    });
  });

/** @internal */
export type Silence$Outbound = {
  silence_reason: string;
  silenced: boolean;
  silenced_at: string;
  silenced_by: SilencedBy$Outbound;
  silenced_till: string;
};

/** @internal */
export const Silence$outboundSchema: z.ZodType<
  Silence$Outbound,
  z.ZodTypeDef,
  Silence
> = z.object({
  silenceReason: z.string(),
  silenced: z.boolean(),
  silencedAt: z.string(),
  silencedBy: z.lazy(() => SilencedBy$outboundSchema),
  silencedTill: z.string(),
}).transform((v) => {
  return remap$(v, {
    silenceReason: "silence_reason",
    silencedAt: "silenced_at",
    silencedBy: "silenced_by",
    silencedTill: "silenced_till",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Silence$ {
  /** @deprecated use `Silence$inboundSchema` instead. */
  export const inboundSchema = Silence$inboundSchema;
  /** @deprecated use `Silence$outboundSchema` instead. */
  export const outboundSchema = Silence$outboundSchema;
  /** @deprecated use `Silence$Outbound` instead. */
  export type Outbound = Silence$Outbound;
}

/** @internal */
export const SilenceUserResponseBody$inboundSchema: z.ZodType<
  SilenceUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  silence: z.lazy(() => Silence$inboundSchema),
});

/** @internal */
export type SilenceUserResponseBody$Outbound = {
  silence: Silence$Outbound;
};

/** @internal */
export const SilenceUserResponseBody$outboundSchema: z.ZodType<
  SilenceUserResponseBody$Outbound,
  z.ZodTypeDef,
  SilenceUserResponseBody
> = z.object({
  silence: z.lazy(() => Silence$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SilenceUserResponseBody$ {
  /** @deprecated use `SilenceUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = SilenceUserResponseBody$inboundSchema;
  /** @deprecated use `SilenceUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = SilenceUserResponseBody$outboundSchema;
  /** @deprecated use `SilenceUserResponseBody$Outbound` instead. */
  export type Outbound = SilenceUserResponseBody$Outbound;
}
