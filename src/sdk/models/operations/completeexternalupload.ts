/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type CompleteExternalUploadRequestBody = {
  /**
   * Optionally set this to true if the upload is for a private message.
   */
  forPrivateMessage?: string | undefined;
  /**
   * Optionally set this to true if the upload is for a site setting.
   */
  forSiteSetting?: string | undefined;
  /**
   * Optionally set this to true if the upload was pasted into the upload area. This will convert PNG files to JPEG.
   */
  pasted?: string | undefined;
  /**
   * The unique identifier returned in the original /generate-presigned-put request.
   */
  uniqueIdentifier: string;
};

/**
 * external upload initialized
 */
export type CompleteExternalUploadResponseBody = {
  dominantColor?: string | null | undefined;
  extension: string;
  filesize: number;
  height: number;
  humanFilesize: string;
  id: number;
  originalFilename: string;
  retainHours: string | null;
  shortPath: string;
  shortUrl: string;
  thumbnailHeight: number;
  thumbnailWidth: number;
  url: string;
  width: number;
};

/** @internal */
export const CompleteExternalUploadRequestBody$inboundSchema: z.ZodType<
  CompleteExternalUploadRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  for_private_message: z.string().optional(),
  for_site_setting: z.string().optional(),
  pasted: z.string().optional(),
  unique_identifier: z.string(),
}).transform((v) => {
  return remap$(v, {
    "for_private_message": "forPrivateMessage",
    "for_site_setting": "forSiteSetting",
    "unique_identifier": "uniqueIdentifier",
  });
});

/** @internal */
export type CompleteExternalUploadRequestBody$Outbound = {
  for_private_message?: string | undefined;
  for_site_setting?: string | undefined;
  pasted?: string | undefined;
  unique_identifier: string;
};

/** @internal */
export const CompleteExternalUploadRequestBody$outboundSchema: z.ZodType<
  CompleteExternalUploadRequestBody$Outbound,
  z.ZodTypeDef,
  CompleteExternalUploadRequestBody
> = z.object({
  forPrivateMessage: z.string().optional(),
  forSiteSetting: z.string().optional(),
  pasted: z.string().optional(),
  uniqueIdentifier: z.string(),
}).transform((v) => {
  return remap$(v, {
    forPrivateMessage: "for_private_message",
    forSiteSetting: "for_site_setting",
    uniqueIdentifier: "unique_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteExternalUploadRequestBody$ {
  /** @deprecated use `CompleteExternalUploadRequestBody$inboundSchema` instead. */
  export const inboundSchema = CompleteExternalUploadRequestBody$inboundSchema;
  /** @deprecated use `CompleteExternalUploadRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CompleteExternalUploadRequestBody$outboundSchema;
  /** @deprecated use `CompleteExternalUploadRequestBody$Outbound` instead. */
  export type Outbound = CompleteExternalUploadRequestBody$Outbound;
}

/** @internal */
export const CompleteExternalUploadResponseBody$inboundSchema: z.ZodType<
  CompleteExternalUploadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  dominant_color: z.nullable(z.string()).optional(),
  extension: z.string(),
  filesize: z.number().int(),
  height: z.number().int(),
  human_filesize: z.string(),
  id: z.number().int(),
  original_filename: z.string(),
  retain_hours: z.nullable(z.string()),
  short_path: z.string(),
  short_url: z.string(),
  thumbnail_height: z.number().int(),
  thumbnail_width: z.number().int(),
  url: z.string(),
  width: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "dominant_color": "dominantColor",
    "human_filesize": "humanFilesize",
    "original_filename": "originalFilename",
    "retain_hours": "retainHours",
    "short_path": "shortPath",
    "short_url": "shortUrl",
    "thumbnail_height": "thumbnailHeight",
    "thumbnail_width": "thumbnailWidth",
  });
});

/** @internal */
export type CompleteExternalUploadResponseBody$Outbound = {
  dominant_color?: string | null | undefined;
  extension: string;
  filesize: number;
  height: number;
  human_filesize: string;
  id: number;
  original_filename: string;
  retain_hours: string | null;
  short_path: string;
  short_url: string;
  thumbnail_height: number;
  thumbnail_width: number;
  url: string;
  width: number;
};

/** @internal */
export const CompleteExternalUploadResponseBody$outboundSchema: z.ZodType<
  CompleteExternalUploadResponseBody$Outbound,
  z.ZodTypeDef,
  CompleteExternalUploadResponseBody
> = z.object({
  dominantColor: z.nullable(z.string()).optional(),
  extension: z.string(),
  filesize: z.number().int(),
  height: z.number().int(),
  humanFilesize: z.string(),
  id: z.number().int(),
  originalFilename: z.string(),
  retainHours: z.nullable(z.string()),
  shortPath: z.string(),
  shortUrl: z.string(),
  thumbnailHeight: z.number().int(),
  thumbnailWidth: z.number().int(),
  url: z.string(),
  width: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    dominantColor: "dominant_color",
    humanFilesize: "human_filesize",
    originalFilename: "original_filename",
    retainHours: "retain_hours",
    shortPath: "short_path",
    shortUrl: "short_url",
    thumbnailHeight: "thumbnail_height",
    thumbnailWidth: "thumbnail_width",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteExternalUploadResponseBody$ {
  /** @deprecated use `CompleteExternalUploadResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompleteExternalUploadResponseBody$inboundSchema;
  /** @deprecated use `CompleteExternalUploadResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompleteExternalUploadResponseBody$outboundSchema;
  /** @deprecated use `CompleteExternalUploadResponseBody$Outbound` instead. */
  export type Outbound = CompleteExternalUploadResponseBody$Outbound;
}
