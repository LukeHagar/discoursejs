/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type Group = {
    /**
     * pipe|separated
     */
    automaticMembershipEmailDomains?: string | undefined;
    /**
     * About Group
     */
    bioRaw?: string | undefined;
    defaultNotificationLevel?: number | undefined;
    flairBgColor?: string | undefined;
    flairIcon?: string | undefined;
    flairUploadId?: number | undefined;
    fullName?: string | undefined;
    mutedCategoryIds?: Array<number> | undefined;
    name: string;
    /**
     * comma,separated
     */
    ownerUsernames?: string | undefined;
    primaryGroup?: boolean | undefined;
    publicAdmission?: boolean | undefined;
    publicExit?: boolean | undefined;
    regularCategoryIds?: Array<number> | undefined;
    trackingCategoryIds?: Array<number> | undefined;
    /**
     * comma,separated
     */
    usernames?: string | undefined;
    visibilityLevel?: number | undefined;
    watchingCategoryIds?: Array<number> | undefined;
    watchingFirstPostCategoryIds?: Array<number> | undefined;
};

export type CreateGroupRequestBody = {
    group: Group;
};

export type BasicGroup = {
    allowMembershipRequests: boolean;
    automatic: boolean;
    bioCooked: string | null;
    bioExcerpt: string | null;
    bioRaw: string | null;
    canAdminGroup: boolean;
    canEditGroup?: boolean | undefined;
    canSeeMembers: boolean;
    defaultNotificationLevel: number;
    flairBgColor: string | null;
    flairColor: string | null;
    flairUrl: string | null;
    fullName: string | null;
    grantTrustLevel: string | null;
    hasMessages: boolean;
    id: number;
    incomingEmail: string | null;
    membersVisibilityLevel: number;
    membershipRequestTemplate: string | null;
    mentionableLevel: number;
    messageableLevel: number;
    name: string;
    primaryGroup: boolean;
    publicAdmission: boolean;
    publicExit: boolean;
    publishReadState: boolean;
    title: string | null;
    userCount: number;
    visibilityLevel: number;
};

/**
 * group created
 */
export type CreateGroupResponseBody = {
    basicGroup: BasicGroup;
};

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
    .object({
        automatic_membership_email_domains: z.string().optional(),
        bio_raw: z.string().optional(),
        default_notification_level: z.number().int().optional(),
        flair_bg_color: z.string().optional(),
        flair_icon: z.string().optional(),
        flair_upload_id: z.number().int().optional(),
        full_name: z.string().optional(),
        muted_category_ids: z.array(z.number().int()).optional(),
        name: z.string(),
        owner_usernames: z.string().optional(),
        primary_group: z.boolean().optional(),
        public_admission: z.boolean().optional(),
        public_exit: z.boolean().optional(),
        regular_category_ids: z.array(z.number().int()).optional(),
        tracking_category_ids: z.array(z.number().int()).optional(),
        usernames: z.string().optional(),
        visibility_level: z.number().int().optional(),
        watching_category_ids: z.array(z.number().int()).optional(),
        watching_first_post_category_ids: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            automatic_membership_email_domains: "automaticMembershipEmailDomains",
            bio_raw: "bioRaw",
            default_notification_level: "defaultNotificationLevel",
            flair_bg_color: "flairBgColor",
            flair_icon: "flairIcon",
            flair_upload_id: "flairUploadId",
            full_name: "fullName",
            muted_category_ids: "mutedCategoryIds",
            owner_usernames: "ownerUsernames",
            primary_group: "primaryGroup",
            public_admission: "publicAdmission",
            public_exit: "publicExit",
            regular_category_ids: "regularCategoryIds",
            tracking_category_ids: "trackingCategoryIds",
            visibility_level: "visibilityLevel",
            watching_category_ids: "watchingCategoryIds",
            watching_first_post_category_ids: "watchingFirstPostCategoryIds",
        });
    });

/** @internal */
export type Group$Outbound = {
    automatic_membership_email_domains?: string | undefined;
    bio_raw?: string | undefined;
    default_notification_level?: number | undefined;
    flair_bg_color?: string | undefined;
    flair_icon?: string | undefined;
    flair_upload_id?: number | undefined;
    full_name?: string | undefined;
    muted_category_ids?: Array<number> | undefined;
    name: string;
    owner_usernames?: string | undefined;
    primary_group?: boolean | undefined;
    public_admission?: boolean | undefined;
    public_exit?: boolean | undefined;
    regular_category_ids?: Array<number> | undefined;
    tracking_category_ids?: Array<number> | undefined;
    usernames?: string | undefined;
    visibility_level?: number | undefined;
    watching_category_ids?: Array<number> | undefined;
    watching_first_post_category_ids?: Array<number> | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group> = z
    .object({
        automaticMembershipEmailDomains: z.string().optional(),
        bioRaw: z.string().optional(),
        defaultNotificationLevel: z.number().int().optional(),
        flairBgColor: z.string().optional(),
        flairIcon: z.string().optional(),
        flairUploadId: z.number().int().optional(),
        fullName: z.string().optional(),
        mutedCategoryIds: z.array(z.number().int()).optional(),
        name: z.string(),
        ownerUsernames: z.string().optional(),
        primaryGroup: z.boolean().optional(),
        publicAdmission: z.boolean().optional(),
        publicExit: z.boolean().optional(),
        regularCategoryIds: z.array(z.number().int()).optional(),
        trackingCategoryIds: z.array(z.number().int()).optional(),
        usernames: z.string().optional(),
        visibilityLevel: z.number().int().optional(),
        watchingCategoryIds: z.array(z.number().int()).optional(),
        watchingFirstPostCategoryIds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            automaticMembershipEmailDomains: "automatic_membership_email_domains",
            bioRaw: "bio_raw",
            defaultNotificationLevel: "default_notification_level",
            flairBgColor: "flair_bg_color",
            flairIcon: "flair_icon",
            flairUploadId: "flair_upload_id",
            fullName: "full_name",
            mutedCategoryIds: "muted_category_ids",
            ownerUsernames: "owner_usernames",
            primaryGroup: "primary_group",
            publicAdmission: "public_admission",
            publicExit: "public_exit",
            regularCategoryIds: "regular_category_ids",
            trackingCategoryIds: "tracking_category_ids",
            visibilityLevel: "visibility_level",
            watchingCategoryIds: "watching_category_ids",
            watchingFirstPostCategoryIds: "watching_first_post_category_ids",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
    /** @deprecated use `Group$inboundSchema` instead. */
    export const inboundSchema = Group$inboundSchema;
    /** @deprecated use `Group$outboundSchema` instead. */
    export const outboundSchema = Group$outboundSchema;
    /** @deprecated use `Group$Outbound` instead. */
    export type Outbound = Group$Outbound;
}

/** @internal */
export const CreateGroupRequestBody$inboundSchema: z.ZodType<
    CreateGroupRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    group: z.lazy(() => Group$inboundSchema),
});

/** @internal */
export type CreateGroupRequestBody$Outbound = {
    group: Group$Outbound;
};

/** @internal */
export const CreateGroupRequestBody$outboundSchema: z.ZodType<
    CreateGroupRequestBody$Outbound,
    z.ZodTypeDef,
    CreateGroupRequestBody
> = z.object({
    group: z.lazy(() => Group$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGroupRequestBody$ {
    /** @deprecated use `CreateGroupRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateGroupRequestBody$inboundSchema;
    /** @deprecated use `CreateGroupRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateGroupRequestBody$outboundSchema;
    /** @deprecated use `CreateGroupRequestBody$Outbound` instead. */
    export type Outbound = CreateGroupRequestBody$Outbound;
}

/** @internal */
export const BasicGroup$inboundSchema: z.ZodType<BasicGroup, z.ZodTypeDef, unknown> = z
    .object({
        allow_membership_requests: z.boolean(),
        automatic: z.boolean(),
        bio_cooked: z.nullable(z.string()),
        bio_excerpt: z.nullable(z.string()),
        bio_raw: z.nullable(z.string()),
        can_admin_group: z.boolean(),
        can_edit_group: z.boolean().optional(),
        can_see_members: z.boolean(),
        default_notification_level: z.number().int(),
        flair_bg_color: z.nullable(z.string()),
        flair_color: z.nullable(z.string()),
        flair_url: z.nullable(z.string()),
        full_name: z.nullable(z.string()),
        grant_trust_level: z.nullable(z.string()),
        has_messages: z.boolean(),
        id: z.number().int(),
        incoming_email: z.nullable(z.string()),
        members_visibility_level: z.number().int(),
        membership_request_template: z.nullable(z.string()),
        mentionable_level: z.number().int(),
        messageable_level: z.number().int(),
        name: z.string(),
        primary_group: z.boolean(),
        public_admission: z.boolean(),
        public_exit: z.boolean(),
        publish_read_state: z.boolean(),
        title: z.nullable(z.string()),
        user_count: z.number().int(),
        visibility_level: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            allow_membership_requests: "allowMembershipRequests",
            bio_cooked: "bioCooked",
            bio_excerpt: "bioExcerpt",
            bio_raw: "bioRaw",
            can_admin_group: "canAdminGroup",
            can_edit_group: "canEditGroup",
            can_see_members: "canSeeMembers",
            default_notification_level: "defaultNotificationLevel",
            flair_bg_color: "flairBgColor",
            flair_color: "flairColor",
            flair_url: "flairUrl",
            full_name: "fullName",
            grant_trust_level: "grantTrustLevel",
            has_messages: "hasMessages",
            incoming_email: "incomingEmail",
            members_visibility_level: "membersVisibilityLevel",
            membership_request_template: "membershipRequestTemplate",
            mentionable_level: "mentionableLevel",
            messageable_level: "messageableLevel",
            primary_group: "primaryGroup",
            public_admission: "publicAdmission",
            public_exit: "publicExit",
            publish_read_state: "publishReadState",
            user_count: "userCount",
            visibility_level: "visibilityLevel",
        });
    });

/** @internal */
export type BasicGroup$Outbound = {
    allow_membership_requests: boolean;
    automatic: boolean;
    bio_cooked: string | null;
    bio_excerpt: string | null;
    bio_raw: string | null;
    can_admin_group: boolean;
    can_edit_group?: boolean | undefined;
    can_see_members: boolean;
    default_notification_level: number;
    flair_bg_color: string | null;
    flair_color: string | null;
    flair_url: string | null;
    full_name: string | null;
    grant_trust_level: string | null;
    has_messages: boolean;
    id: number;
    incoming_email: string | null;
    members_visibility_level: number;
    membership_request_template: string | null;
    mentionable_level: number;
    messageable_level: number;
    name: string;
    primary_group: boolean;
    public_admission: boolean;
    public_exit: boolean;
    publish_read_state: boolean;
    title: string | null;
    user_count: number;
    visibility_level: number;
};

/** @internal */
export const BasicGroup$outboundSchema: z.ZodType<BasicGroup$Outbound, z.ZodTypeDef, BasicGroup> = z
    .object({
        allowMembershipRequests: z.boolean(),
        automatic: z.boolean(),
        bioCooked: z.nullable(z.string()),
        bioExcerpt: z.nullable(z.string()),
        bioRaw: z.nullable(z.string()),
        canAdminGroup: z.boolean(),
        canEditGroup: z.boolean().optional(),
        canSeeMembers: z.boolean(),
        defaultNotificationLevel: z.number().int(),
        flairBgColor: z.nullable(z.string()),
        flairColor: z.nullable(z.string()),
        flairUrl: z.nullable(z.string()),
        fullName: z.nullable(z.string()),
        grantTrustLevel: z.nullable(z.string()),
        hasMessages: z.boolean(),
        id: z.number().int(),
        incomingEmail: z.nullable(z.string()),
        membersVisibilityLevel: z.number().int(),
        membershipRequestTemplate: z.nullable(z.string()),
        mentionableLevel: z.number().int(),
        messageableLevel: z.number().int(),
        name: z.string(),
        primaryGroup: z.boolean(),
        publicAdmission: z.boolean(),
        publicExit: z.boolean(),
        publishReadState: z.boolean(),
        title: z.nullable(z.string()),
        userCount: z.number().int(),
        visibilityLevel: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            allowMembershipRequests: "allow_membership_requests",
            bioCooked: "bio_cooked",
            bioExcerpt: "bio_excerpt",
            bioRaw: "bio_raw",
            canAdminGroup: "can_admin_group",
            canEditGroup: "can_edit_group",
            canSeeMembers: "can_see_members",
            defaultNotificationLevel: "default_notification_level",
            flairBgColor: "flair_bg_color",
            flairColor: "flair_color",
            flairUrl: "flair_url",
            fullName: "full_name",
            grantTrustLevel: "grant_trust_level",
            hasMessages: "has_messages",
            incomingEmail: "incoming_email",
            membersVisibilityLevel: "members_visibility_level",
            membershipRequestTemplate: "membership_request_template",
            mentionableLevel: "mentionable_level",
            messageableLevel: "messageable_level",
            primaryGroup: "primary_group",
            publicAdmission: "public_admission",
            publicExit: "public_exit",
            publishReadState: "publish_read_state",
            userCount: "user_count",
            visibilityLevel: "visibility_level",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicGroup$ {
    /** @deprecated use `BasicGroup$inboundSchema` instead. */
    export const inboundSchema = BasicGroup$inboundSchema;
    /** @deprecated use `BasicGroup$outboundSchema` instead. */
    export const outboundSchema = BasicGroup$outboundSchema;
    /** @deprecated use `BasicGroup$Outbound` instead. */
    export type Outbound = BasicGroup$Outbound;
}

/** @internal */
export const CreateGroupResponseBody$inboundSchema: z.ZodType<
    CreateGroupResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        basic_group: z.lazy(() => BasicGroup$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            basic_group: "basicGroup",
        });
    });

/** @internal */
export type CreateGroupResponseBody$Outbound = {
    basic_group: BasicGroup$Outbound;
};

/** @internal */
export const CreateGroupResponseBody$outboundSchema: z.ZodType<
    CreateGroupResponseBody$Outbound,
    z.ZodTypeDef,
    CreateGroupResponseBody
> = z
    .object({
        basicGroup: z.lazy(() => BasicGroup$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            basicGroup: "basic_group",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGroupResponseBody$ {
    /** @deprecated use `CreateGroupResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateGroupResponseBody$inboundSchema;
    /** @deprecated use `CreateGroupResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateGroupResponseBody$outboundSchema;
    /** @deprecated use `CreateGroupResponseBody$Outbound` instead. */
    export type Outbound = CreateGroupResponseBody$Outbound;
}
