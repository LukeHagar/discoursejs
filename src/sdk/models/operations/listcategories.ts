/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ListCategoriesRequest = {
  includeSubcategories?: boolean | undefined;
};

export type Categories = {
  canEdit: boolean;
  color: string;
  defaultListFilter: string;
  defaultTopPeriod: string;
  defaultView: string | null;
  description: string | null;
  descriptionExcerpt: string | null;
  descriptionText: string | null;
  hasChildren: boolean;
  id: number;
  isUncategorized?: boolean | undefined;
  minimumRequiredTags: number;
  name: string;
  navigateToFirstPostAfterRead: boolean;
  notificationLevel: number;
  numFeaturedTopics: number;
  permission: number;
  position: number;
  postCount: number;
  readRestricted: boolean;
  showSubcategoryList: boolean;
  slug: string;
  sortAscending: string | null;
  sortOrder: string | null;
  subcategoryIds: Array<any>;
  subcategoryList?: Array<any> | null | undefined;
  subcategoryListStyle: string;
  textColor: string;
  topicCount: number;
  topicTemplate: string | null;
  topicUrl: string | null;
  topicsAllTime: number;
  topicsDay: number;
  topicsMonth: number;
  topicsWeek: number;
  topicsYear: number;
  uploadedBackground: string | null;
  uploadedBackgroundDark: string | null;
  uploadedLogo: string | null;
  uploadedLogoDark: string | null;
};

export type CategoryList = {
  canCreateCategory: boolean;
  canCreateTopic: boolean;
  categories: Array<Categories>;
};

/**
 * success response
 */
export type ListCategoriesResponseBody = {
  categoryList: CategoryList;
};

/** @internal */
export const ListCategoriesRequest$inboundSchema: z.ZodType<
  ListCategoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_subcategories: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_subcategories": "includeSubcategories",
  });
});

/** @internal */
export type ListCategoriesRequest$Outbound = {
  include_subcategories?: boolean | undefined;
};

/** @internal */
export const ListCategoriesRequest$outboundSchema: z.ZodType<
  ListCategoriesRequest$Outbound,
  z.ZodTypeDef,
  ListCategoriesRequest
> = z.object({
  includeSubcategories: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeSubcategories: "include_subcategories",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCategoriesRequest$ {
  /** @deprecated use `ListCategoriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCategoriesRequest$inboundSchema;
  /** @deprecated use `ListCategoriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCategoriesRequest$outboundSchema;
  /** @deprecated use `ListCategoriesRequest$Outbound` instead. */
  export type Outbound = ListCategoriesRequest$Outbound;
}

/** @internal */
export const Categories$inboundSchema: z.ZodType<
  Categories,
  z.ZodTypeDef,
  unknown
> = z.object({
  can_edit: z.boolean(),
  color: z.string(),
  default_list_filter: z.string(),
  default_top_period: z.string(),
  default_view: z.nullable(z.string()),
  description: z.nullable(z.string()),
  description_excerpt: z.nullable(z.string()),
  description_text: z.nullable(z.string()),
  has_children: z.boolean(),
  id: z.number().int(),
  is_uncategorized: z.boolean().optional(),
  minimum_required_tags: z.number().int(),
  name: z.string(),
  navigate_to_first_post_after_read: z.boolean(),
  notification_level: z.number().int(),
  num_featured_topics: z.number().int(),
  permission: z.number().int(),
  position: z.number().int(),
  post_count: z.number().int(),
  read_restricted: z.boolean(),
  show_subcategory_list: z.boolean(),
  slug: z.string(),
  sort_ascending: z.nullable(z.string()),
  sort_order: z.nullable(z.string()),
  subcategory_ids: z.array(z.any()),
  subcategory_list: z.nullable(z.array(z.any())).optional(),
  subcategory_list_style: z.string(),
  text_color: z.string(),
  topic_count: z.number().int(),
  topic_template: z.nullable(z.string()),
  topic_url: z.nullable(z.string()),
  topics_all_time: z.number().int(),
  topics_day: z.number().int(),
  topics_month: z.number().int(),
  topics_week: z.number().int(),
  topics_year: z.number().int(),
  uploaded_background: z.nullable(z.string()),
  uploaded_background_dark: z.nullable(z.string()),
  uploaded_logo: z.nullable(z.string()),
  uploaded_logo_dark: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "can_edit": "canEdit",
    "default_list_filter": "defaultListFilter",
    "default_top_period": "defaultTopPeriod",
    "default_view": "defaultView",
    "description_excerpt": "descriptionExcerpt",
    "description_text": "descriptionText",
    "has_children": "hasChildren",
    "is_uncategorized": "isUncategorized",
    "minimum_required_tags": "minimumRequiredTags",
    "navigate_to_first_post_after_read": "navigateToFirstPostAfterRead",
    "notification_level": "notificationLevel",
    "num_featured_topics": "numFeaturedTopics",
    "post_count": "postCount",
    "read_restricted": "readRestricted",
    "show_subcategory_list": "showSubcategoryList",
    "sort_ascending": "sortAscending",
    "sort_order": "sortOrder",
    "subcategory_ids": "subcategoryIds",
    "subcategory_list": "subcategoryList",
    "subcategory_list_style": "subcategoryListStyle",
    "text_color": "textColor",
    "topic_count": "topicCount",
    "topic_template": "topicTemplate",
    "topic_url": "topicUrl",
    "topics_all_time": "topicsAllTime",
    "topics_day": "topicsDay",
    "topics_month": "topicsMonth",
    "topics_week": "topicsWeek",
    "topics_year": "topicsYear",
    "uploaded_background": "uploadedBackground",
    "uploaded_background_dark": "uploadedBackgroundDark",
    "uploaded_logo": "uploadedLogo",
    "uploaded_logo_dark": "uploadedLogoDark",
  });
});

/** @internal */
export type Categories$Outbound = {
  can_edit: boolean;
  color: string;
  default_list_filter: string;
  default_top_period: string;
  default_view: string | null;
  description: string | null;
  description_excerpt: string | null;
  description_text: string | null;
  has_children: boolean;
  id: number;
  is_uncategorized?: boolean | undefined;
  minimum_required_tags: number;
  name: string;
  navigate_to_first_post_after_read: boolean;
  notification_level: number;
  num_featured_topics: number;
  permission: number;
  position: number;
  post_count: number;
  read_restricted: boolean;
  show_subcategory_list: boolean;
  slug: string;
  sort_ascending: string | null;
  sort_order: string | null;
  subcategory_ids: Array<any>;
  subcategory_list?: Array<any> | null | undefined;
  subcategory_list_style: string;
  text_color: string;
  topic_count: number;
  topic_template: string | null;
  topic_url: string | null;
  topics_all_time: number;
  topics_day: number;
  topics_month: number;
  topics_week: number;
  topics_year: number;
  uploaded_background: string | null;
  uploaded_background_dark: string | null;
  uploaded_logo: string | null;
  uploaded_logo_dark: string | null;
};

/** @internal */
export const Categories$outboundSchema: z.ZodType<
  Categories$Outbound,
  z.ZodTypeDef,
  Categories
> = z.object({
  canEdit: z.boolean(),
  color: z.string(),
  defaultListFilter: z.string(),
  defaultTopPeriod: z.string(),
  defaultView: z.nullable(z.string()),
  description: z.nullable(z.string()),
  descriptionExcerpt: z.nullable(z.string()),
  descriptionText: z.nullable(z.string()),
  hasChildren: z.boolean(),
  id: z.number().int(),
  isUncategorized: z.boolean().optional(),
  minimumRequiredTags: z.number().int(),
  name: z.string(),
  navigateToFirstPostAfterRead: z.boolean(),
  notificationLevel: z.number().int(),
  numFeaturedTopics: z.number().int(),
  permission: z.number().int(),
  position: z.number().int(),
  postCount: z.number().int(),
  readRestricted: z.boolean(),
  showSubcategoryList: z.boolean(),
  slug: z.string(),
  sortAscending: z.nullable(z.string()),
  sortOrder: z.nullable(z.string()),
  subcategoryIds: z.array(z.any()),
  subcategoryList: z.nullable(z.array(z.any())).optional(),
  subcategoryListStyle: z.string(),
  textColor: z.string(),
  topicCount: z.number().int(),
  topicTemplate: z.nullable(z.string()),
  topicUrl: z.nullable(z.string()),
  topicsAllTime: z.number().int(),
  topicsDay: z.number().int(),
  topicsMonth: z.number().int(),
  topicsWeek: z.number().int(),
  topicsYear: z.number().int(),
  uploadedBackground: z.nullable(z.string()),
  uploadedBackgroundDark: z.nullable(z.string()),
  uploadedLogo: z.nullable(z.string()),
  uploadedLogoDark: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    canEdit: "can_edit",
    defaultListFilter: "default_list_filter",
    defaultTopPeriod: "default_top_period",
    defaultView: "default_view",
    descriptionExcerpt: "description_excerpt",
    descriptionText: "description_text",
    hasChildren: "has_children",
    isUncategorized: "is_uncategorized",
    minimumRequiredTags: "minimum_required_tags",
    navigateToFirstPostAfterRead: "navigate_to_first_post_after_read",
    notificationLevel: "notification_level",
    numFeaturedTopics: "num_featured_topics",
    postCount: "post_count",
    readRestricted: "read_restricted",
    showSubcategoryList: "show_subcategory_list",
    sortAscending: "sort_ascending",
    sortOrder: "sort_order",
    subcategoryIds: "subcategory_ids",
    subcategoryList: "subcategory_list",
    subcategoryListStyle: "subcategory_list_style",
    textColor: "text_color",
    topicCount: "topic_count",
    topicTemplate: "topic_template",
    topicUrl: "topic_url",
    topicsAllTime: "topics_all_time",
    topicsDay: "topics_day",
    topicsMonth: "topics_month",
    topicsWeek: "topics_week",
    topicsYear: "topics_year",
    uploadedBackground: "uploaded_background",
    uploadedBackgroundDark: "uploaded_background_dark",
    uploadedLogo: "uploaded_logo",
    uploadedLogoDark: "uploaded_logo_dark",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
  /** @deprecated use `Categories$Outbound` instead. */
  export type Outbound = Categories$Outbound;
}

/** @internal */
export const CategoryList$inboundSchema: z.ZodType<
  CategoryList,
  z.ZodTypeDef,
  unknown
> = z.object({
  can_create_category: z.boolean(),
  can_create_topic: z.boolean(),
  categories: z.array(z.lazy(() => Categories$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "can_create_category": "canCreateCategory",
    "can_create_topic": "canCreateTopic",
  });
});

/** @internal */
export type CategoryList$Outbound = {
  can_create_category: boolean;
  can_create_topic: boolean;
  categories: Array<Categories$Outbound>;
};

/** @internal */
export const CategoryList$outboundSchema: z.ZodType<
  CategoryList$Outbound,
  z.ZodTypeDef,
  CategoryList
> = z.object({
  canCreateCategory: z.boolean(),
  canCreateTopic: z.boolean(),
  categories: z.array(z.lazy(() => Categories$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    canCreateCategory: "can_create_category",
    canCreateTopic: "can_create_topic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryList$ {
  /** @deprecated use `CategoryList$inboundSchema` instead. */
  export const inboundSchema = CategoryList$inboundSchema;
  /** @deprecated use `CategoryList$outboundSchema` instead. */
  export const outboundSchema = CategoryList$outboundSchema;
  /** @deprecated use `CategoryList$Outbound` instead. */
  export type Outbound = CategoryList$Outbound;
}

/** @internal */
export const ListCategoriesResponseBody$inboundSchema: z.ZodType<
  ListCategoriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  category_list: z.lazy(() => CategoryList$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "category_list": "categoryList",
  });
});

/** @internal */
export type ListCategoriesResponseBody$Outbound = {
  category_list: CategoryList$Outbound;
};

/** @internal */
export const ListCategoriesResponseBody$outboundSchema: z.ZodType<
  ListCategoriesResponseBody$Outbound,
  z.ZodTypeDef,
  ListCategoriesResponseBody
> = z.object({
  categoryList: z.lazy(() => CategoryList$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    categoryList: "category_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCategoriesResponseBody$ {
  /** @deprecated use `ListCategoriesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListCategoriesResponseBody$inboundSchema;
  /** @deprecated use `ListCategoriesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListCategoriesResponseBody$outboundSchema;
  /** @deprecated use `ListCategoriesResponseBody$Outbound` instead. */
  export type Outbound = ListCategoriesResponseBody$Outbound;
}
