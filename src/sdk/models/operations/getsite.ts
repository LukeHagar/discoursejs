/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type Archetypes = {
    id: string;
    name: string;
    options: Array<any>;
};

export type GetSiteRequiredTagGroups = {
    minCount: number;
    name: string;
};

export type GetSiteCategories = {
    allowGlobalTags: boolean;
    allowedTagGroups: Array<any>;
    allowedTags: Array<any>;
    canEdit: boolean;
    color: string;
    customFields?: { [k: string]: any } | null | undefined;
    defaultListFilter: string;
    defaultTopPeriod: string;
    defaultView: string | null;
    description?: string | null | undefined;
    descriptionExcerpt?: string | null | undefined;
    descriptionText?: string | null | undefined;
    formTemplateIds?: Array<any> | undefined;
    hasChildren: boolean;
    id: number;
    minimumRequiredTags: number;
    name: string;
    navigateToFirstPostAfterRead: boolean;
    notificationLevel: number;
    numFeaturedTopics: number;
    parentCategoryId?: number | undefined;
    permission: number;
    position: number;
    postCount: number;
    readOnlyBanner: string | null;
    readRestricted: boolean;
    requiredTagGroups: Array<GetSiteRequiredTagGroups>;
    showSubcategoryList: boolean;
    slug: string;
    sortAscending: string | null;
    sortOrder: string | null;
    subcategoryListStyle: string;
    textColor: string;
    topicCount: number;
    topicTemplate: string | null;
    topicUrl: string;
    uploadedBackground: string | null;
    uploadedBackgroundDark: string | null;
    uploadedLogo: string | null;
    uploadedLogoDark: string | null;
};

export type CensoredRegexp = {};

export type CustomEmojiTranslation = {};

export type DefaultDarkColorScheme = {};

export type GetSiteGroups = {
    flairBgColor: string | null;
    flairColor: string | null;
    flairUrl: string | null;
    id: number;
    name: string;
};

export type HashtagConfigurations = {};

export type HashtagIcons = {};

export type MarkdownAdditionalOptions = {};

export type NotificationTypes = {
    adminProblems?: number | undefined;
    assigned?: number | undefined;
    bookmarkReminder: number;
    chatGroupMention: number;
    chatInvitation: number;
    chatMention: number;
    chatMessage: number;
    chatQuoted?: number | undefined;
    circlesActivity?: number | undefined;
    codeReviewCommitApproved: number;
    custom: number;
    edited: number;
    eventInvitation: number;
    eventReminder: number;
    following?: number | undefined;
    followingCreatedTopic?: number | undefined;
    followingReplied?: number | undefined;
    grantedBadge: number;
    groupMentioned: number;
    groupMessageSummary: number;
    invitedToPrivateMessage: number;
    invitedToTopic: number;
    inviteeAccepted: number;
    liked: number;
    likedConsolidated: number;
    linked: number;
    membershipRequestAccepted: number;
    membershipRequestConsolidated: number;
    mentioned: number;
    movedPost: number;
    newFeatures?: number | undefined;
    postApproved: number;
    posted: number;
    privateMessage: number;
    questionAnswerUserCommented?: number | undefined;
    quoted: number;
    reaction: number;
    replied: number;
    topicReminder: number;
    votesReleased: number;
    watchingCategoryOrTag: number;
    watchingFirstPost: number;
};

export type PostActionTypes = {
    description: string;
    id: number | null;
    isCustomFlag: boolean;
    isFlag: boolean;
    name: string;
    nameKey: string | null;
    shortDescription: string;
};

export type PostTypes = {
    moderatorAction: number;
    regular: number;
    smallAction: number;
    whisper: number;
};

export type TopicFlagTypes = {
    description: string;
    id: number | null;
    isCustomFlag: boolean;
    isFlag: boolean;
    name: string;
    nameKey: string | null;
    shortDescription: string;
};

export type TrustLevels = {
    basic: number;
    leader: number;
    member: number;
    newuser: number;
    regular: number;
};

export type UserColorSchemes = {
    id: number;
    isDark: boolean;
    name: string;
};

export type UserThemes = {
    colorSchemeId: number | null;
    default: boolean;
    name: string;
    themeId: number;
};

export type UserTips = {
    adminGuide: number;
    firstNotification: number;
    postMenu: number;
    suggestedTopics: number;
    topicNotificationLevels: number;
    topicTimeline: number;
};

/**
 * success response
 */
export type GetSiteResponseBody = {
    anonymousTopMenuItems: Array<any>;
    archetypes: Array<Archetypes>;
    authProviders: Array<any>;
    canAssociateGroups?: boolean | undefined;
    canCreateTag: boolean;
    canTagPms: boolean;
    canTagTopics: boolean;
    categories: Array<GetSiteCategories>;
    censoredRegexp: Array<CensoredRegexp>;
    customEmojiTranslation: CustomEmojiTranslation;
    defaultArchetype: string;
    defaultDarkColorScheme: DefaultDarkColorScheme | null;
    deniedEmojis?: Array<any> | undefined;
    displayedAboutPluginStatGroups?: Array<any> | undefined;
    filters: Array<any>;
    groups: Array<GetSiteGroups>;
    hashtagConfigurations?: HashtagConfigurations | undefined;
    hashtagIcons?: HashtagIcons | undefined;
    markdownAdditionalOptions?: MarkdownAdditionalOptions | undefined;
    navigationMenuSiteTopTags?: Array<any> | undefined;
    notificationTypes: NotificationTypes;
    periods: Array<any>;
    postActionTypes: Array<PostActionTypes>;
    postTypes: PostTypes;
    tagsFilterRegexp: string;
    topMenuItems: Array<any>;
    topTags: Array<any>;
    topicFeaturedLinkAllowedCategoryIds: Array<any>;
    topicFlagTypes: Array<TopicFlagTypes>;
    trustLevels: TrustLevels;
    uncategorizedCategoryId: number;
    userColorSchemes: Array<UserColorSchemes>;
    userFieldMaxLength: number;
    userFields: Array<any>;
    userThemes: Array<UserThemes>;
    userTips?: UserTips | undefined;
    watchedWordsLink: string | null;
    watchedWordsReplace: string | null;
    whispersAllowedGroupsNames?: Array<any> | undefined;
    wizardRequired?: boolean | undefined;
};

/** @internal */
export const Archetypes$inboundSchema: z.ZodType<Archetypes, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    name: z.string(),
    options: z.array(z.any()),
});

/** @internal */
export type Archetypes$Outbound = {
    id: string;
    name: string;
    options: Array<any>;
};

/** @internal */
export const Archetypes$outboundSchema: z.ZodType<Archetypes$Outbound, z.ZodTypeDef, Archetypes> =
    z.object({
        id: z.string(),
        name: z.string(),
        options: z.array(z.any()),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Archetypes$ {
    /** @deprecated use `Archetypes$inboundSchema` instead. */
    export const inboundSchema = Archetypes$inboundSchema;
    /** @deprecated use `Archetypes$outboundSchema` instead. */
    export const outboundSchema = Archetypes$outboundSchema;
    /** @deprecated use `Archetypes$Outbound` instead. */
    export type Outbound = Archetypes$Outbound;
}

/** @internal */
export const GetSiteRequiredTagGroups$inboundSchema: z.ZodType<
    GetSiteRequiredTagGroups,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        min_count: z.number().int(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            min_count: "minCount",
        });
    });

/** @internal */
export type GetSiteRequiredTagGroups$Outbound = {
    min_count: number;
    name: string;
};

/** @internal */
export const GetSiteRequiredTagGroups$outboundSchema: z.ZodType<
    GetSiteRequiredTagGroups$Outbound,
    z.ZodTypeDef,
    GetSiteRequiredTagGroups
> = z
    .object({
        minCount: z.number().int(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            minCount: "min_count",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSiteRequiredTagGroups$ {
    /** @deprecated use `GetSiteRequiredTagGroups$inboundSchema` instead. */
    export const inboundSchema = GetSiteRequiredTagGroups$inboundSchema;
    /** @deprecated use `GetSiteRequiredTagGroups$outboundSchema` instead. */
    export const outboundSchema = GetSiteRequiredTagGroups$outboundSchema;
    /** @deprecated use `GetSiteRequiredTagGroups$Outbound` instead. */
    export type Outbound = GetSiteRequiredTagGroups$Outbound;
}

/** @internal */
export const GetSiteCategories$inboundSchema: z.ZodType<GetSiteCategories, z.ZodTypeDef, unknown> =
    z
        .object({
            allow_global_tags: z.boolean(),
            allowed_tag_groups: z.array(z.any()),
            allowed_tags: z.array(z.any()),
            can_edit: z.boolean(),
            color: z.string(),
            custom_fields: z.nullable(z.record(z.any())).optional(),
            default_list_filter: z.string(),
            default_top_period: z.string(),
            default_view: z.nullable(z.string()),
            description: z.nullable(z.string()).optional(),
            description_excerpt: z.nullable(z.string()).optional(),
            description_text: z.nullable(z.string()).optional(),
            form_template_ids: z.array(z.any()).optional(),
            has_children: z.boolean(),
            id: z.number().int(),
            minimum_required_tags: z.number().int(),
            name: z.string(),
            navigate_to_first_post_after_read: z.boolean(),
            notification_level: z.number().int(),
            num_featured_topics: z.number().int(),
            parent_category_id: z.number().int().optional(),
            permission: z.number().int(),
            position: z.number().int(),
            post_count: z.number().int(),
            read_only_banner: z.nullable(z.string()),
            read_restricted: z.boolean(),
            required_tag_groups: z.array(z.lazy(() => GetSiteRequiredTagGroups$inboundSchema)),
            show_subcategory_list: z.boolean(),
            slug: z.string(),
            sort_ascending: z.nullable(z.string()),
            sort_order: z.nullable(z.string()),
            subcategory_list_style: z.string(),
            text_color: z.string(),
            topic_count: z.number().int(),
            topic_template: z.nullable(z.string()),
            topic_url: z.string(),
            uploaded_background: z.nullable(z.string()),
            uploaded_background_dark: z.nullable(z.string()),
            uploaded_logo: z.nullable(z.string()),
            uploaded_logo_dark: z.nullable(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                allow_global_tags: "allowGlobalTags",
                allowed_tag_groups: "allowedTagGroups",
                allowed_tags: "allowedTags",
                can_edit: "canEdit",
                custom_fields: "customFields",
                default_list_filter: "defaultListFilter",
                default_top_period: "defaultTopPeriod",
                default_view: "defaultView",
                description_excerpt: "descriptionExcerpt",
                description_text: "descriptionText",
                form_template_ids: "formTemplateIds",
                has_children: "hasChildren",
                minimum_required_tags: "minimumRequiredTags",
                navigate_to_first_post_after_read: "navigateToFirstPostAfterRead",
                notification_level: "notificationLevel",
                num_featured_topics: "numFeaturedTopics",
                parent_category_id: "parentCategoryId",
                post_count: "postCount",
                read_only_banner: "readOnlyBanner",
                read_restricted: "readRestricted",
                required_tag_groups: "requiredTagGroups",
                show_subcategory_list: "showSubcategoryList",
                sort_ascending: "sortAscending",
                sort_order: "sortOrder",
                subcategory_list_style: "subcategoryListStyle",
                text_color: "textColor",
                topic_count: "topicCount",
                topic_template: "topicTemplate",
                topic_url: "topicUrl",
                uploaded_background: "uploadedBackground",
                uploaded_background_dark: "uploadedBackgroundDark",
                uploaded_logo: "uploadedLogo",
                uploaded_logo_dark: "uploadedLogoDark",
            });
        });

/** @internal */
export type GetSiteCategories$Outbound = {
    allow_global_tags: boolean;
    allowed_tag_groups: Array<any>;
    allowed_tags: Array<any>;
    can_edit: boolean;
    color: string;
    custom_fields?: { [k: string]: any } | null | undefined;
    default_list_filter: string;
    default_top_period: string;
    default_view: string | null;
    description?: string | null | undefined;
    description_excerpt?: string | null | undefined;
    description_text?: string | null | undefined;
    form_template_ids?: Array<any> | undefined;
    has_children: boolean;
    id: number;
    minimum_required_tags: number;
    name: string;
    navigate_to_first_post_after_read: boolean;
    notification_level: number;
    num_featured_topics: number;
    parent_category_id?: number | undefined;
    permission: number;
    position: number;
    post_count: number;
    read_only_banner: string | null;
    read_restricted: boolean;
    required_tag_groups: Array<GetSiteRequiredTagGroups$Outbound>;
    show_subcategory_list: boolean;
    slug: string;
    sort_ascending: string | null;
    sort_order: string | null;
    subcategory_list_style: string;
    text_color: string;
    topic_count: number;
    topic_template: string | null;
    topic_url: string;
    uploaded_background: string | null;
    uploaded_background_dark: string | null;
    uploaded_logo: string | null;
    uploaded_logo_dark: string | null;
};

/** @internal */
export const GetSiteCategories$outboundSchema: z.ZodType<
    GetSiteCategories$Outbound,
    z.ZodTypeDef,
    GetSiteCategories
> = z
    .object({
        allowGlobalTags: z.boolean(),
        allowedTagGroups: z.array(z.any()),
        allowedTags: z.array(z.any()),
        canEdit: z.boolean(),
        color: z.string(),
        customFields: z.nullable(z.record(z.any())).optional(),
        defaultListFilter: z.string(),
        defaultTopPeriod: z.string(),
        defaultView: z.nullable(z.string()),
        description: z.nullable(z.string()).optional(),
        descriptionExcerpt: z.nullable(z.string()).optional(),
        descriptionText: z.nullable(z.string()).optional(),
        formTemplateIds: z.array(z.any()).optional(),
        hasChildren: z.boolean(),
        id: z.number().int(),
        minimumRequiredTags: z.number().int(),
        name: z.string(),
        navigateToFirstPostAfterRead: z.boolean(),
        notificationLevel: z.number().int(),
        numFeaturedTopics: z.number().int(),
        parentCategoryId: z.number().int().optional(),
        permission: z.number().int(),
        position: z.number().int(),
        postCount: z.number().int(),
        readOnlyBanner: z.nullable(z.string()),
        readRestricted: z.boolean(),
        requiredTagGroups: z.array(z.lazy(() => GetSiteRequiredTagGroups$outboundSchema)),
        showSubcategoryList: z.boolean(),
        slug: z.string(),
        sortAscending: z.nullable(z.string()),
        sortOrder: z.nullable(z.string()),
        subcategoryListStyle: z.string(),
        textColor: z.string(),
        topicCount: z.number().int(),
        topicTemplate: z.nullable(z.string()),
        topicUrl: z.string(),
        uploadedBackground: z.nullable(z.string()),
        uploadedBackgroundDark: z.nullable(z.string()),
        uploadedLogo: z.nullable(z.string()),
        uploadedLogoDark: z.nullable(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            allowGlobalTags: "allow_global_tags",
            allowedTagGroups: "allowed_tag_groups",
            allowedTags: "allowed_tags",
            canEdit: "can_edit",
            customFields: "custom_fields",
            defaultListFilter: "default_list_filter",
            defaultTopPeriod: "default_top_period",
            defaultView: "default_view",
            descriptionExcerpt: "description_excerpt",
            descriptionText: "description_text",
            formTemplateIds: "form_template_ids",
            hasChildren: "has_children",
            minimumRequiredTags: "minimum_required_tags",
            navigateToFirstPostAfterRead: "navigate_to_first_post_after_read",
            notificationLevel: "notification_level",
            numFeaturedTopics: "num_featured_topics",
            parentCategoryId: "parent_category_id",
            postCount: "post_count",
            readOnlyBanner: "read_only_banner",
            readRestricted: "read_restricted",
            requiredTagGroups: "required_tag_groups",
            showSubcategoryList: "show_subcategory_list",
            sortAscending: "sort_ascending",
            sortOrder: "sort_order",
            subcategoryListStyle: "subcategory_list_style",
            textColor: "text_color",
            topicCount: "topic_count",
            topicTemplate: "topic_template",
            topicUrl: "topic_url",
            uploadedBackground: "uploaded_background",
            uploadedBackgroundDark: "uploaded_background_dark",
            uploadedLogo: "uploaded_logo",
            uploadedLogoDark: "uploaded_logo_dark",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSiteCategories$ {
    /** @deprecated use `GetSiteCategories$inboundSchema` instead. */
    export const inboundSchema = GetSiteCategories$inboundSchema;
    /** @deprecated use `GetSiteCategories$outboundSchema` instead. */
    export const outboundSchema = GetSiteCategories$outboundSchema;
    /** @deprecated use `GetSiteCategories$Outbound` instead. */
    export type Outbound = GetSiteCategories$Outbound;
}

/** @internal */
export const CensoredRegexp$inboundSchema: z.ZodType<CensoredRegexp, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type CensoredRegexp$Outbound = {};

/** @internal */
export const CensoredRegexp$outboundSchema: z.ZodType<
    CensoredRegexp$Outbound,
    z.ZodTypeDef,
    CensoredRegexp
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CensoredRegexp$ {
    /** @deprecated use `CensoredRegexp$inboundSchema` instead. */
    export const inboundSchema = CensoredRegexp$inboundSchema;
    /** @deprecated use `CensoredRegexp$outboundSchema` instead. */
    export const outboundSchema = CensoredRegexp$outboundSchema;
    /** @deprecated use `CensoredRegexp$Outbound` instead. */
    export type Outbound = CensoredRegexp$Outbound;
}

/** @internal */
export const CustomEmojiTranslation$inboundSchema: z.ZodType<
    CustomEmojiTranslation,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type CustomEmojiTranslation$Outbound = {};

/** @internal */
export const CustomEmojiTranslation$outboundSchema: z.ZodType<
    CustomEmojiTranslation$Outbound,
    z.ZodTypeDef,
    CustomEmojiTranslation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomEmojiTranslation$ {
    /** @deprecated use `CustomEmojiTranslation$inboundSchema` instead. */
    export const inboundSchema = CustomEmojiTranslation$inboundSchema;
    /** @deprecated use `CustomEmojiTranslation$outboundSchema` instead. */
    export const outboundSchema = CustomEmojiTranslation$outboundSchema;
    /** @deprecated use `CustomEmojiTranslation$Outbound` instead. */
    export type Outbound = CustomEmojiTranslation$Outbound;
}

/** @internal */
export const DefaultDarkColorScheme$inboundSchema: z.ZodType<
    DefaultDarkColorScheme,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type DefaultDarkColorScheme$Outbound = {};

/** @internal */
export const DefaultDarkColorScheme$outboundSchema: z.ZodType<
    DefaultDarkColorScheme$Outbound,
    z.ZodTypeDef,
    DefaultDarkColorScheme
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultDarkColorScheme$ {
    /** @deprecated use `DefaultDarkColorScheme$inboundSchema` instead. */
    export const inboundSchema = DefaultDarkColorScheme$inboundSchema;
    /** @deprecated use `DefaultDarkColorScheme$outboundSchema` instead. */
    export const outboundSchema = DefaultDarkColorScheme$outboundSchema;
    /** @deprecated use `DefaultDarkColorScheme$Outbound` instead. */
    export type Outbound = DefaultDarkColorScheme$Outbound;
}

/** @internal */
export const GetSiteGroups$inboundSchema: z.ZodType<GetSiteGroups, z.ZodTypeDef, unknown> = z
    .object({
        flair_bg_color: z.nullable(z.string()),
        flair_color: z.nullable(z.string()),
        flair_url: z.nullable(z.string()),
        id: z.number().int(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            flair_bg_color: "flairBgColor",
            flair_color: "flairColor",
            flair_url: "flairUrl",
        });
    });

/** @internal */
export type GetSiteGroups$Outbound = {
    flair_bg_color: string | null;
    flair_color: string | null;
    flair_url: string | null;
    id: number;
    name: string;
};

/** @internal */
export const GetSiteGroups$outboundSchema: z.ZodType<
    GetSiteGroups$Outbound,
    z.ZodTypeDef,
    GetSiteGroups
> = z
    .object({
        flairBgColor: z.nullable(z.string()),
        flairColor: z.nullable(z.string()),
        flairUrl: z.nullable(z.string()),
        id: z.number().int(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            flairBgColor: "flair_bg_color",
            flairColor: "flair_color",
            flairUrl: "flair_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSiteGroups$ {
    /** @deprecated use `GetSiteGroups$inboundSchema` instead. */
    export const inboundSchema = GetSiteGroups$inboundSchema;
    /** @deprecated use `GetSiteGroups$outboundSchema` instead. */
    export const outboundSchema = GetSiteGroups$outboundSchema;
    /** @deprecated use `GetSiteGroups$Outbound` instead. */
    export type Outbound = GetSiteGroups$Outbound;
}

/** @internal */
export const HashtagConfigurations$inboundSchema: z.ZodType<
    HashtagConfigurations,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type HashtagConfigurations$Outbound = {};

/** @internal */
export const HashtagConfigurations$outboundSchema: z.ZodType<
    HashtagConfigurations$Outbound,
    z.ZodTypeDef,
    HashtagConfigurations
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HashtagConfigurations$ {
    /** @deprecated use `HashtagConfigurations$inboundSchema` instead. */
    export const inboundSchema = HashtagConfigurations$inboundSchema;
    /** @deprecated use `HashtagConfigurations$outboundSchema` instead. */
    export const outboundSchema = HashtagConfigurations$outboundSchema;
    /** @deprecated use `HashtagConfigurations$Outbound` instead. */
    export type Outbound = HashtagConfigurations$Outbound;
}

/** @internal */
export const HashtagIcons$inboundSchema: z.ZodType<HashtagIcons, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type HashtagIcons$Outbound = {};

/** @internal */
export const HashtagIcons$outboundSchema: z.ZodType<
    HashtagIcons$Outbound,
    z.ZodTypeDef,
    HashtagIcons
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HashtagIcons$ {
    /** @deprecated use `HashtagIcons$inboundSchema` instead. */
    export const inboundSchema = HashtagIcons$inboundSchema;
    /** @deprecated use `HashtagIcons$outboundSchema` instead. */
    export const outboundSchema = HashtagIcons$outboundSchema;
    /** @deprecated use `HashtagIcons$Outbound` instead. */
    export type Outbound = HashtagIcons$Outbound;
}

/** @internal */
export const MarkdownAdditionalOptions$inboundSchema: z.ZodType<
    MarkdownAdditionalOptions,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type MarkdownAdditionalOptions$Outbound = {};

/** @internal */
export const MarkdownAdditionalOptions$outboundSchema: z.ZodType<
    MarkdownAdditionalOptions$Outbound,
    z.ZodTypeDef,
    MarkdownAdditionalOptions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkdownAdditionalOptions$ {
    /** @deprecated use `MarkdownAdditionalOptions$inboundSchema` instead. */
    export const inboundSchema = MarkdownAdditionalOptions$inboundSchema;
    /** @deprecated use `MarkdownAdditionalOptions$outboundSchema` instead. */
    export const outboundSchema = MarkdownAdditionalOptions$outboundSchema;
    /** @deprecated use `MarkdownAdditionalOptions$Outbound` instead. */
    export type Outbound = MarkdownAdditionalOptions$Outbound;
}

/** @internal */
export const NotificationTypes$inboundSchema: z.ZodType<NotificationTypes, z.ZodTypeDef, unknown> =
    z
        .object({
            admin_problems: z.number().int().optional(),
            assigned: z.number().int().optional(),
            bookmark_reminder: z.number().int(),
            chat_group_mention: z.number().int(),
            chat_invitation: z.number().int(),
            chat_mention: z.number().int(),
            chat_message: z.number().int(),
            chat_quoted: z.number().int().optional(),
            circles_activity: z.number().int().optional(),
            code_review_commit_approved: z.number().int(),
            custom: z.number().int(),
            edited: z.number().int(),
            event_invitation: z.number().int(),
            event_reminder: z.number().int(),
            following: z.number().int().optional(),
            following_created_topic: z.number().int().optional(),
            following_replied: z.number().int().optional(),
            granted_badge: z.number().int(),
            group_mentioned: z.number().int(),
            group_message_summary: z.number().int(),
            invited_to_private_message: z.number().int(),
            invited_to_topic: z.number().int(),
            invitee_accepted: z.number().int(),
            liked: z.number().int(),
            liked_consolidated: z.number().int(),
            linked: z.number().int(),
            membership_request_accepted: z.number().int(),
            membership_request_consolidated: z.number().int(),
            mentioned: z.number().int(),
            moved_post: z.number().int(),
            new_features: z.number().int().optional(),
            post_approved: z.number().int(),
            posted: z.number().int(),
            private_message: z.number().int(),
            question_answer_user_commented: z.number().int().optional(),
            quoted: z.number().int(),
            reaction: z.number().int(),
            replied: z.number().int(),
            topic_reminder: z.number().int(),
            votes_released: z.number().int(),
            watching_category_or_tag: z.number().int(),
            watching_first_post: z.number().int(),
        })
        .transform((v) => {
            return remap$(v, {
                admin_problems: "adminProblems",
                bookmark_reminder: "bookmarkReminder",
                chat_group_mention: "chatGroupMention",
                chat_invitation: "chatInvitation",
                chat_mention: "chatMention",
                chat_message: "chatMessage",
                chat_quoted: "chatQuoted",
                circles_activity: "circlesActivity",
                code_review_commit_approved: "codeReviewCommitApproved",
                event_invitation: "eventInvitation",
                event_reminder: "eventReminder",
                following_created_topic: "followingCreatedTopic",
                following_replied: "followingReplied",
                granted_badge: "grantedBadge",
                group_mentioned: "groupMentioned",
                group_message_summary: "groupMessageSummary",
                invited_to_private_message: "invitedToPrivateMessage",
                invited_to_topic: "invitedToTopic",
                invitee_accepted: "inviteeAccepted",
                liked_consolidated: "likedConsolidated",
                membership_request_accepted: "membershipRequestAccepted",
                membership_request_consolidated: "membershipRequestConsolidated",
                moved_post: "movedPost",
                new_features: "newFeatures",
                post_approved: "postApproved",
                private_message: "privateMessage",
                question_answer_user_commented: "questionAnswerUserCommented",
                topic_reminder: "topicReminder",
                votes_released: "votesReleased",
                watching_category_or_tag: "watchingCategoryOrTag",
                watching_first_post: "watchingFirstPost",
            });
        });

/** @internal */
export type NotificationTypes$Outbound = {
    admin_problems?: number | undefined;
    assigned?: number | undefined;
    bookmark_reminder: number;
    chat_group_mention: number;
    chat_invitation: number;
    chat_mention: number;
    chat_message: number;
    chat_quoted?: number | undefined;
    circles_activity?: number | undefined;
    code_review_commit_approved: number;
    custom: number;
    edited: number;
    event_invitation: number;
    event_reminder: number;
    following?: number | undefined;
    following_created_topic?: number | undefined;
    following_replied?: number | undefined;
    granted_badge: number;
    group_mentioned: number;
    group_message_summary: number;
    invited_to_private_message: number;
    invited_to_topic: number;
    invitee_accepted: number;
    liked: number;
    liked_consolidated: number;
    linked: number;
    membership_request_accepted: number;
    membership_request_consolidated: number;
    mentioned: number;
    moved_post: number;
    new_features?: number | undefined;
    post_approved: number;
    posted: number;
    private_message: number;
    question_answer_user_commented?: number | undefined;
    quoted: number;
    reaction: number;
    replied: number;
    topic_reminder: number;
    votes_released: number;
    watching_category_or_tag: number;
    watching_first_post: number;
};

/** @internal */
export const NotificationTypes$outboundSchema: z.ZodType<
    NotificationTypes$Outbound,
    z.ZodTypeDef,
    NotificationTypes
> = z
    .object({
        adminProblems: z.number().int().optional(),
        assigned: z.number().int().optional(),
        bookmarkReminder: z.number().int(),
        chatGroupMention: z.number().int(),
        chatInvitation: z.number().int(),
        chatMention: z.number().int(),
        chatMessage: z.number().int(),
        chatQuoted: z.number().int().optional(),
        circlesActivity: z.number().int().optional(),
        codeReviewCommitApproved: z.number().int(),
        custom: z.number().int(),
        edited: z.number().int(),
        eventInvitation: z.number().int(),
        eventReminder: z.number().int(),
        following: z.number().int().optional(),
        followingCreatedTopic: z.number().int().optional(),
        followingReplied: z.number().int().optional(),
        grantedBadge: z.number().int(),
        groupMentioned: z.number().int(),
        groupMessageSummary: z.number().int(),
        invitedToPrivateMessage: z.number().int(),
        invitedToTopic: z.number().int(),
        inviteeAccepted: z.number().int(),
        liked: z.number().int(),
        likedConsolidated: z.number().int(),
        linked: z.number().int(),
        membershipRequestAccepted: z.number().int(),
        membershipRequestConsolidated: z.number().int(),
        mentioned: z.number().int(),
        movedPost: z.number().int(),
        newFeatures: z.number().int().optional(),
        postApproved: z.number().int(),
        posted: z.number().int(),
        privateMessage: z.number().int(),
        questionAnswerUserCommented: z.number().int().optional(),
        quoted: z.number().int(),
        reaction: z.number().int(),
        replied: z.number().int(),
        topicReminder: z.number().int(),
        votesReleased: z.number().int(),
        watchingCategoryOrTag: z.number().int(),
        watchingFirstPost: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            adminProblems: "admin_problems",
            bookmarkReminder: "bookmark_reminder",
            chatGroupMention: "chat_group_mention",
            chatInvitation: "chat_invitation",
            chatMention: "chat_mention",
            chatMessage: "chat_message",
            chatQuoted: "chat_quoted",
            circlesActivity: "circles_activity",
            codeReviewCommitApproved: "code_review_commit_approved",
            eventInvitation: "event_invitation",
            eventReminder: "event_reminder",
            followingCreatedTopic: "following_created_topic",
            followingReplied: "following_replied",
            grantedBadge: "granted_badge",
            groupMentioned: "group_mentioned",
            groupMessageSummary: "group_message_summary",
            invitedToPrivateMessage: "invited_to_private_message",
            invitedToTopic: "invited_to_topic",
            inviteeAccepted: "invitee_accepted",
            likedConsolidated: "liked_consolidated",
            membershipRequestAccepted: "membership_request_accepted",
            membershipRequestConsolidated: "membership_request_consolidated",
            movedPost: "moved_post",
            newFeatures: "new_features",
            postApproved: "post_approved",
            privateMessage: "private_message",
            questionAnswerUserCommented: "question_answer_user_commented",
            topicReminder: "topic_reminder",
            votesReleased: "votes_released",
            watchingCategoryOrTag: "watching_category_or_tag",
            watchingFirstPost: "watching_first_post",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTypes$ {
    /** @deprecated use `NotificationTypes$inboundSchema` instead. */
    export const inboundSchema = NotificationTypes$inboundSchema;
    /** @deprecated use `NotificationTypes$outboundSchema` instead. */
    export const outboundSchema = NotificationTypes$outboundSchema;
    /** @deprecated use `NotificationTypes$Outbound` instead. */
    export type Outbound = NotificationTypes$Outbound;
}

/** @internal */
export const PostActionTypes$inboundSchema: z.ZodType<PostActionTypes, z.ZodTypeDef, unknown> = z
    .object({
        description: z.string(),
        id: z.nullable(z.number().int()),
        is_custom_flag: z.boolean(),
        is_flag: z.boolean(),
        name: z.string(),
        name_key: z.nullable(z.string()),
        short_description: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            is_custom_flag: "isCustomFlag",
            is_flag: "isFlag",
            name_key: "nameKey",
            short_description: "shortDescription",
        });
    });

/** @internal */
export type PostActionTypes$Outbound = {
    description: string;
    id: number | null;
    is_custom_flag: boolean;
    is_flag: boolean;
    name: string;
    name_key: string | null;
    short_description: string;
};

/** @internal */
export const PostActionTypes$outboundSchema: z.ZodType<
    PostActionTypes$Outbound,
    z.ZodTypeDef,
    PostActionTypes
> = z
    .object({
        description: z.string(),
        id: z.nullable(z.number().int()),
        isCustomFlag: z.boolean(),
        isFlag: z.boolean(),
        name: z.string(),
        nameKey: z.nullable(z.string()),
        shortDescription: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            isCustomFlag: "is_custom_flag",
            isFlag: "is_flag",
            nameKey: "name_key",
            shortDescription: "short_description",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostActionTypes$ {
    /** @deprecated use `PostActionTypes$inboundSchema` instead. */
    export const inboundSchema = PostActionTypes$inboundSchema;
    /** @deprecated use `PostActionTypes$outboundSchema` instead. */
    export const outboundSchema = PostActionTypes$outboundSchema;
    /** @deprecated use `PostActionTypes$Outbound` instead. */
    export type Outbound = PostActionTypes$Outbound;
}

/** @internal */
export const PostTypes$inboundSchema: z.ZodType<PostTypes, z.ZodTypeDef, unknown> = z
    .object({
        moderator_action: z.number().int(),
        regular: z.number().int(),
        small_action: z.number().int(),
        whisper: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            moderator_action: "moderatorAction",
            small_action: "smallAction",
        });
    });

/** @internal */
export type PostTypes$Outbound = {
    moderator_action: number;
    regular: number;
    small_action: number;
    whisper: number;
};

/** @internal */
export const PostTypes$outboundSchema: z.ZodType<PostTypes$Outbound, z.ZodTypeDef, PostTypes> = z
    .object({
        moderatorAction: z.number().int(),
        regular: z.number().int(),
        smallAction: z.number().int(),
        whisper: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            moderatorAction: "moderator_action",
            smallAction: "small_action",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTypes$ {
    /** @deprecated use `PostTypes$inboundSchema` instead. */
    export const inboundSchema = PostTypes$inboundSchema;
    /** @deprecated use `PostTypes$outboundSchema` instead. */
    export const outboundSchema = PostTypes$outboundSchema;
    /** @deprecated use `PostTypes$Outbound` instead. */
    export type Outbound = PostTypes$Outbound;
}

/** @internal */
export const TopicFlagTypes$inboundSchema: z.ZodType<TopicFlagTypes, z.ZodTypeDef, unknown> = z
    .object({
        description: z.string(),
        id: z.nullable(z.number().int()),
        is_custom_flag: z.boolean(),
        is_flag: z.boolean(),
        name: z.string(),
        name_key: z.nullable(z.string()),
        short_description: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            is_custom_flag: "isCustomFlag",
            is_flag: "isFlag",
            name_key: "nameKey",
            short_description: "shortDescription",
        });
    });

/** @internal */
export type TopicFlagTypes$Outbound = {
    description: string;
    id: number | null;
    is_custom_flag: boolean;
    is_flag: boolean;
    name: string;
    name_key: string | null;
    short_description: string;
};

/** @internal */
export const TopicFlagTypes$outboundSchema: z.ZodType<
    TopicFlagTypes$Outbound,
    z.ZodTypeDef,
    TopicFlagTypes
> = z
    .object({
        description: z.string(),
        id: z.nullable(z.number().int()),
        isCustomFlag: z.boolean(),
        isFlag: z.boolean(),
        name: z.string(),
        nameKey: z.nullable(z.string()),
        shortDescription: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            isCustomFlag: "is_custom_flag",
            isFlag: "is_flag",
            nameKey: "name_key",
            shortDescription: "short_description",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicFlagTypes$ {
    /** @deprecated use `TopicFlagTypes$inboundSchema` instead. */
    export const inboundSchema = TopicFlagTypes$inboundSchema;
    /** @deprecated use `TopicFlagTypes$outboundSchema` instead. */
    export const outboundSchema = TopicFlagTypes$outboundSchema;
    /** @deprecated use `TopicFlagTypes$Outbound` instead. */
    export type Outbound = TopicFlagTypes$Outbound;
}

/** @internal */
export const TrustLevels$inboundSchema: z.ZodType<TrustLevels, z.ZodTypeDef, unknown> = z.object({
    basic: z.number().int(),
    leader: z.number().int(),
    member: z.number().int(),
    newuser: z.number().int(),
    regular: z.number().int(),
});

/** @internal */
export type TrustLevels$Outbound = {
    basic: number;
    leader: number;
    member: number;
    newuser: number;
    regular: number;
};

/** @internal */
export const TrustLevels$outboundSchema: z.ZodType<
    TrustLevels$Outbound,
    z.ZodTypeDef,
    TrustLevels
> = z.object({
    basic: z.number().int(),
    leader: z.number().int(),
    member: z.number().int(),
    newuser: z.number().int(),
    regular: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrustLevels$ {
    /** @deprecated use `TrustLevels$inboundSchema` instead. */
    export const inboundSchema = TrustLevels$inboundSchema;
    /** @deprecated use `TrustLevels$outboundSchema` instead. */
    export const outboundSchema = TrustLevels$outboundSchema;
    /** @deprecated use `TrustLevels$Outbound` instead. */
    export type Outbound = TrustLevels$Outbound;
}

/** @internal */
export const UserColorSchemes$inboundSchema: z.ZodType<UserColorSchemes, z.ZodTypeDef, unknown> = z
    .object({
        id: z.number().int(),
        is_dark: z.boolean(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            is_dark: "isDark",
        });
    });

/** @internal */
export type UserColorSchemes$Outbound = {
    id: number;
    is_dark: boolean;
    name: string;
};

/** @internal */
export const UserColorSchemes$outboundSchema: z.ZodType<
    UserColorSchemes$Outbound,
    z.ZodTypeDef,
    UserColorSchemes
> = z
    .object({
        id: z.number().int(),
        isDark: z.boolean(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            isDark: "is_dark",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserColorSchemes$ {
    /** @deprecated use `UserColorSchemes$inboundSchema` instead. */
    export const inboundSchema = UserColorSchemes$inboundSchema;
    /** @deprecated use `UserColorSchemes$outboundSchema` instead. */
    export const outboundSchema = UserColorSchemes$outboundSchema;
    /** @deprecated use `UserColorSchemes$Outbound` instead. */
    export type Outbound = UserColorSchemes$Outbound;
}

/** @internal */
export const UserThemes$inboundSchema: z.ZodType<UserThemes, z.ZodTypeDef, unknown> = z
    .object({
        color_scheme_id: z.nullable(z.number().int()),
        default: z.boolean(),
        name: z.string(),
        theme_id: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            color_scheme_id: "colorSchemeId",
            theme_id: "themeId",
        });
    });

/** @internal */
export type UserThemes$Outbound = {
    color_scheme_id: number | null;
    default: boolean;
    name: string;
    theme_id: number;
};

/** @internal */
export const UserThemes$outboundSchema: z.ZodType<UserThemes$Outbound, z.ZodTypeDef, UserThemes> = z
    .object({
        colorSchemeId: z.nullable(z.number().int()),
        default: z.boolean(),
        name: z.string(),
        themeId: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            colorSchemeId: "color_scheme_id",
            themeId: "theme_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserThemes$ {
    /** @deprecated use `UserThemes$inboundSchema` instead. */
    export const inboundSchema = UserThemes$inboundSchema;
    /** @deprecated use `UserThemes$outboundSchema` instead. */
    export const outboundSchema = UserThemes$outboundSchema;
    /** @deprecated use `UserThemes$Outbound` instead. */
    export type Outbound = UserThemes$Outbound;
}

/** @internal */
export const UserTips$inboundSchema: z.ZodType<UserTips, z.ZodTypeDef, unknown> = z
    .object({
        admin_guide: z.number().int(),
        first_notification: z.number().int(),
        post_menu: z.number().int(),
        suggested_topics: z.number().int(),
        topic_notification_levels: z.number().int(),
        topic_timeline: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            admin_guide: "adminGuide",
            first_notification: "firstNotification",
            post_menu: "postMenu",
            suggested_topics: "suggestedTopics",
            topic_notification_levels: "topicNotificationLevels",
            topic_timeline: "topicTimeline",
        });
    });

/** @internal */
export type UserTips$Outbound = {
    admin_guide: number;
    first_notification: number;
    post_menu: number;
    suggested_topics: number;
    topic_notification_levels: number;
    topic_timeline: number;
};

/** @internal */
export const UserTips$outboundSchema: z.ZodType<UserTips$Outbound, z.ZodTypeDef, UserTips> = z
    .object({
        adminGuide: z.number().int(),
        firstNotification: z.number().int(),
        postMenu: z.number().int(),
        suggestedTopics: z.number().int(),
        topicNotificationLevels: z.number().int(),
        topicTimeline: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            adminGuide: "admin_guide",
            firstNotification: "first_notification",
            postMenu: "post_menu",
            suggestedTopics: "suggested_topics",
            topicNotificationLevels: "topic_notification_levels",
            topicTimeline: "topic_timeline",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserTips$ {
    /** @deprecated use `UserTips$inboundSchema` instead. */
    export const inboundSchema = UserTips$inboundSchema;
    /** @deprecated use `UserTips$outboundSchema` instead. */
    export const outboundSchema = UserTips$outboundSchema;
    /** @deprecated use `UserTips$Outbound` instead. */
    export type Outbound = UserTips$Outbound;
}

/** @internal */
export const GetSiteResponseBody$inboundSchema: z.ZodType<
    GetSiteResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anonymous_top_menu_items: z.array(z.any()),
        archetypes: z.array(z.lazy(() => Archetypes$inboundSchema)),
        auth_providers: z.array(z.any()),
        can_associate_groups: z.boolean().optional(),
        can_create_tag: z.boolean(),
        can_tag_pms: z.boolean(),
        can_tag_topics: z.boolean(),
        categories: z.array(z.lazy(() => GetSiteCategories$inboundSchema)),
        censored_regexp: z.array(z.lazy(() => CensoredRegexp$inboundSchema)),
        custom_emoji_translation: z.lazy(() => CustomEmojiTranslation$inboundSchema),
        default_archetype: z.string(),
        default_dark_color_scheme: z.nullable(z.lazy(() => DefaultDarkColorScheme$inboundSchema)),
        denied_emojis: z.array(z.any()).optional(),
        displayed_about_plugin_stat_groups: z.array(z.any()).optional(),
        filters: z.array(z.any()),
        groups: z.array(z.lazy(() => GetSiteGroups$inboundSchema)),
        hashtag_configurations: z.lazy(() => HashtagConfigurations$inboundSchema).optional(),
        hashtag_icons: z.lazy(() => HashtagIcons$inboundSchema).optional(),
        markdown_additional_options: z
            .lazy(() => MarkdownAdditionalOptions$inboundSchema)
            .optional(),
        navigation_menu_site_top_tags: z.array(z.any()).optional(),
        notification_types: z.lazy(() => NotificationTypes$inboundSchema),
        periods: z.array(z.any()),
        post_action_types: z.array(z.lazy(() => PostActionTypes$inboundSchema)),
        post_types: z.lazy(() => PostTypes$inboundSchema),
        tags_filter_regexp: z.string(),
        top_menu_items: z.array(z.any()),
        top_tags: z.array(z.any()),
        topic_featured_link_allowed_category_ids: z.array(z.any()),
        topic_flag_types: z.array(z.lazy(() => TopicFlagTypes$inboundSchema)),
        trust_levels: z.lazy(() => TrustLevels$inboundSchema),
        uncategorized_category_id: z.number().int(),
        user_color_schemes: z.array(z.lazy(() => UserColorSchemes$inboundSchema)),
        user_field_max_length: z.number().int(),
        user_fields: z.array(z.any()),
        user_themes: z.array(z.lazy(() => UserThemes$inboundSchema)),
        user_tips: z.lazy(() => UserTips$inboundSchema).optional(),
        watched_words_link: z.nullable(z.string()),
        watched_words_replace: z.nullable(z.string()),
        whispers_allowed_groups_names: z.array(z.any()).optional(),
        wizard_required: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anonymous_top_menu_items: "anonymousTopMenuItems",
            auth_providers: "authProviders",
            can_associate_groups: "canAssociateGroups",
            can_create_tag: "canCreateTag",
            can_tag_pms: "canTagPms",
            can_tag_topics: "canTagTopics",
            censored_regexp: "censoredRegexp",
            custom_emoji_translation: "customEmojiTranslation",
            default_archetype: "defaultArchetype",
            default_dark_color_scheme: "defaultDarkColorScheme",
            denied_emojis: "deniedEmojis",
            displayed_about_plugin_stat_groups: "displayedAboutPluginStatGroups",
            hashtag_configurations: "hashtagConfigurations",
            hashtag_icons: "hashtagIcons",
            markdown_additional_options: "markdownAdditionalOptions",
            navigation_menu_site_top_tags: "navigationMenuSiteTopTags",
            notification_types: "notificationTypes",
            post_action_types: "postActionTypes",
            post_types: "postTypes",
            tags_filter_regexp: "tagsFilterRegexp",
            top_menu_items: "topMenuItems",
            top_tags: "topTags",
            topic_featured_link_allowed_category_ids: "topicFeaturedLinkAllowedCategoryIds",
            topic_flag_types: "topicFlagTypes",
            trust_levels: "trustLevels",
            uncategorized_category_id: "uncategorizedCategoryId",
            user_color_schemes: "userColorSchemes",
            user_field_max_length: "userFieldMaxLength",
            user_fields: "userFields",
            user_themes: "userThemes",
            user_tips: "userTips",
            watched_words_link: "watchedWordsLink",
            watched_words_replace: "watchedWordsReplace",
            whispers_allowed_groups_names: "whispersAllowedGroupsNames",
            wizard_required: "wizardRequired",
        });
    });

/** @internal */
export type GetSiteResponseBody$Outbound = {
    anonymous_top_menu_items: Array<any>;
    archetypes: Array<Archetypes$Outbound>;
    auth_providers: Array<any>;
    can_associate_groups?: boolean | undefined;
    can_create_tag: boolean;
    can_tag_pms: boolean;
    can_tag_topics: boolean;
    categories: Array<GetSiteCategories$Outbound>;
    censored_regexp: Array<CensoredRegexp$Outbound>;
    custom_emoji_translation: CustomEmojiTranslation$Outbound;
    default_archetype: string;
    default_dark_color_scheme: DefaultDarkColorScheme$Outbound | null;
    denied_emojis?: Array<any> | undefined;
    displayed_about_plugin_stat_groups?: Array<any> | undefined;
    filters: Array<any>;
    groups: Array<GetSiteGroups$Outbound>;
    hashtag_configurations?: HashtagConfigurations$Outbound | undefined;
    hashtag_icons?: HashtagIcons$Outbound | undefined;
    markdown_additional_options?: MarkdownAdditionalOptions$Outbound | undefined;
    navigation_menu_site_top_tags?: Array<any> | undefined;
    notification_types: NotificationTypes$Outbound;
    periods: Array<any>;
    post_action_types: Array<PostActionTypes$Outbound>;
    post_types: PostTypes$Outbound;
    tags_filter_regexp: string;
    top_menu_items: Array<any>;
    top_tags: Array<any>;
    topic_featured_link_allowed_category_ids: Array<any>;
    topic_flag_types: Array<TopicFlagTypes$Outbound>;
    trust_levels: TrustLevels$Outbound;
    uncategorized_category_id: number;
    user_color_schemes: Array<UserColorSchemes$Outbound>;
    user_field_max_length: number;
    user_fields: Array<any>;
    user_themes: Array<UserThemes$Outbound>;
    user_tips?: UserTips$Outbound | undefined;
    watched_words_link: string | null;
    watched_words_replace: string | null;
    whispers_allowed_groups_names?: Array<any> | undefined;
    wizard_required?: boolean | undefined;
};

/** @internal */
export const GetSiteResponseBody$outboundSchema: z.ZodType<
    GetSiteResponseBody$Outbound,
    z.ZodTypeDef,
    GetSiteResponseBody
> = z
    .object({
        anonymousTopMenuItems: z.array(z.any()),
        archetypes: z.array(z.lazy(() => Archetypes$outboundSchema)),
        authProviders: z.array(z.any()),
        canAssociateGroups: z.boolean().optional(),
        canCreateTag: z.boolean(),
        canTagPms: z.boolean(),
        canTagTopics: z.boolean(),
        categories: z.array(z.lazy(() => GetSiteCategories$outboundSchema)),
        censoredRegexp: z.array(z.lazy(() => CensoredRegexp$outboundSchema)),
        customEmojiTranslation: z.lazy(() => CustomEmojiTranslation$outboundSchema),
        defaultArchetype: z.string(),
        defaultDarkColorScheme: z.nullable(z.lazy(() => DefaultDarkColorScheme$outboundSchema)),
        deniedEmojis: z.array(z.any()).optional(),
        displayedAboutPluginStatGroups: z.array(z.any()).optional(),
        filters: z.array(z.any()),
        groups: z.array(z.lazy(() => GetSiteGroups$outboundSchema)),
        hashtagConfigurations: z.lazy(() => HashtagConfigurations$outboundSchema).optional(),
        hashtagIcons: z.lazy(() => HashtagIcons$outboundSchema).optional(),
        markdownAdditionalOptions: z
            .lazy(() => MarkdownAdditionalOptions$outboundSchema)
            .optional(),
        navigationMenuSiteTopTags: z.array(z.any()).optional(),
        notificationTypes: z.lazy(() => NotificationTypes$outboundSchema),
        periods: z.array(z.any()),
        postActionTypes: z.array(z.lazy(() => PostActionTypes$outboundSchema)),
        postTypes: z.lazy(() => PostTypes$outboundSchema),
        tagsFilterRegexp: z.string(),
        topMenuItems: z.array(z.any()),
        topTags: z.array(z.any()),
        topicFeaturedLinkAllowedCategoryIds: z.array(z.any()),
        topicFlagTypes: z.array(z.lazy(() => TopicFlagTypes$outboundSchema)),
        trustLevels: z.lazy(() => TrustLevels$outboundSchema),
        uncategorizedCategoryId: z.number().int(),
        userColorSchemes: z.array(z.lazy(() => UserColorSchemes$outboundSchema)),
        userFieldMaxLength: z.number().int(),
        userFields: z.array(z.any()),
        userThemes: z.array(z.lazy(() => UserThemes$outboundSchema)),
        userTips: z.lazy(() => UserTips$outboundSchema).optional(),
        watchedWordsLink: z.nullable(z.string()),
        watchedWordsReplace: z.nullable(z.string()),
        whispersAllowedGroupsNames: z.array(z.any()).optional(),
        wizardRequired: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anonymousTopMenuItems: "anonymous_top_menu_items",
            authProviders: "auth_providers",
            canAssociateGroups: "can_associate_groups",
            canCreateTag: "can_create_tag",
            canTagPms: "can_tag_pms",
            canTagTopics: "can_tag_topics",
            censoredRegexp: "censored_regexp",
            customEmojiTranslation: "custom_emoji_translation",
            defaultArchetype: "default_archetype",
            defaultDarkColorScheme: "default_dark_color_scheme",
            deniedEmojis: "denied_emojis",
            displayedAboutPluginStatGroups: "displayed_about_plugin_stat_groups",
            hashtagConfigurations: "hashtag_configurations",
            hashtagIcons: "hashtag_icons",
            markdownAdditionalOptions: "markdown_additional_options",
            navigationMenuSiteTopTags: "navigation_menu_site_top_tags",
            notificationTypes: "notification_types",
            postActionTypes: "post_action_types",
            postTypes: "post_types",
            tagsFilterRegexp: "tags_filter_regexp",
            topMenuItems: "top_menu_items",
            topTags: "top_tags",
            topicFeaturedLinkAllowedCategoryIds: "topic_featured_link_allowed_category_ids",
            topicFlagTypes: "topic_flag_types",
            trustLevels: "trust_levels",
            uncategorizedCategoryId: "uncategorized_category_id",
            userColorSchemes: "user_color_schemes",
            userFieldMaxLength: "user_field_max_length",
            userFields: "user_fields",
            userThemes: "user_themes",
            userTips: "user_tips",
            watchedWordsLink: "watched_words_link",
            watchedWordsReplace: "watched_words_replace",
            whispersAllowedGroupsNames: "whispers_allowed_groups_names",
            wizardRequired: "wizard_required",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSiteResponseBody$ {
    /** @deprecated use `GetSiteResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetSiteResponseBody$inboundSchema;
    /** @deprecated use `GetSiteResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetSiteResponseBody$outboundSchema;
    /** @deprecated use `GetSiteResponseBody$Outbound` instead. */
    export type Outbound = GetSiteResponseBody$Outbound;
}
