/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ListGroupMembersRequest = {
  /**
   * Use group name instead of id
   */
  id: string;
};

export type Members = {
  addedAt: string;
  avatarTemplate: string;
  id: number;
  lastPostedAt: string;
  lastSeenAt: string;
  name: string | null;
  timezone: string;
  title: string | null;
  username: string;
};

export type Meta = {
  limit: number;
  offset: number;
  total: number;
};

export type Owners = {
  addedAt: string;
  avatarTemplate: string;
  id: number;
  lastPostedAt: string;
  lastSeenAt: string;
  name: string | null;
  timezone: string;
  title: string | null;
  username: string;
};

/**
 * success response
 */
export type ListGroupMembersResponseBody = {
  members: Array<Members>;
  meta: Meta;
  owners: Array<Owners>;
};

/** @internal */
export const ListGroupMembersRequest$inboundSchema: z.ZodType<
  ListGroupMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ListGroupMembersRequest$Outbound = {
  id: string;
};

/** @internal */
export const ListGroupMembersRequest$outboundSchema: z.ZodType<
  ListGroupMembersRequest$Outbound,
  z.ZodTypeDef,
  ListGroupMembersRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGroupMembersRequest$ {
  /** @deprecated use `ListGroupMembersRequest$inboundSchema` instead. */
  export const inboundSchema = ListGroupMembersRequest$inboundSchema;
  /** @deprecated use `ListGroupMembersRequest$outboundSchema` instead. */
  export const outboundSchema = ListGroupMembersRequest$outboundSchema;
  /** @deprecated use `ListGroupMembersRequest$Outbound` instead. */
  export type Outbound = ListGroupMembersRequest$Outbound;
}

/** @internal */
export const Members$inboundSchema: z.ZodType<Members, z.ZodTypeDef, unknown> =
  z.object({
    added_at: z.string(),
    avatar_template: z.string(),
    id: z.number().int(),
    last_posted_at: z.string(),
    last_seen_at: z.string(),
    name: z.nullable(z.string()),
    timezone: z.string(),
    title: z.nullable(z.string()),
    username: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "added_at": "addedAt",
      "avatar_template": "avatarTemplate",
      "last_posted_at": "lastPostedAt",
      "last_seen_at": "lastSeenAt",
    });
  });

/** @internal */
export type Members$Outbound = {
  added_at: string;
  avatar_template: string;
  id: number;
  last_posted_at: string;
  last_seen_at: string;
  name: string | null;
  timezone: string;
  title: string | null;
  username: string;
};

/** @internal */
export const Members$outboundSchema: z.ZodType<
  Members$Outbound,
  z.ZodTypeDef,
  Members
> = z.object({
  addedAt: z.string(),
  avatarTemplate: z.string(),
  id: z.number().int(),
  lastPostedAt: z.string(),
  lastSeenAt: z.string(),
  name: z.nullable(z.string()),
  timezone: z.string(),
  title: z.nullable(z.string()),
  username: z.string(),
}).transform((v) => {
  return remap$(v, {
    addedAt: "added_at",
    avatarTemplate: "avatar_template",
    lastPostedAt: "last_posted_at",
    lastSeenAt: "last_seen_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Members$ {
  /** @deprecated use `Members$inboundSchema` instead. */
  export const inboundSchema = Members$inboundSchema;
  /** @deprecated use `Members$outboundSchema` instead. */
  export const outboundSchema = Members$outboundSchema;
  /** @deprecated use `Members$Outbound` instead. */
  export type Outbound = Members$Outbound;
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    limit: z.number().int(),
    offset: z.number().int(),
    total: z.number().int(),
  });

/** @internal */
export type Meta$Outbound = {
  limit: number;
  offset: number;
  total: number;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    limit: z.number().int(),
    offset: z.number().int(),
    total: z.number().int(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

/** @internal */
export const Owners$inboundSchema: z.ZodType<Owners, z.ZodTypeDef, unknown> = z
  .object({
    added_at: z.string(),
    avatar_template: z.string(),
    id: z.number().int(),
    last_posted_at: z.string(),
    last_seen_at: z.string(),
    name: z.nullable(z.string()),
    timezone: z.string(),
    title: z.nullable(z.string()),
    username: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "added_at": "addedAt",
      "avatar_template": "avatarTemplate",
      "last_posted_at": "lastPostedAt",
      "last_seen_at": "lastSeenAt",
    });
  });

/** @internal */
export type Owners$Outbound = {
  added_at: string;
  avatar_template: string;
  id: number;
  last_posted_at: string;
  last_seen_at: string;
  name: string | null;
  timezone: string;
  title: string | null;
  username: string;
};

/** @internal */
export const Owners$outboundSchema: z.ZodType<
  Owners$Outbound,
  z.ZodTypeDef,
  Owners
> = z.object({
  addedAt: z.string(),
  avatarTemplate: z.string(),
  id: z.number().int(),
  lastPostedAt: z.string(),
  lastSeenAt: z.string(),
  name: z.nullable(z.string()),
  timezone: z.string(),
  title: z.nullable(z.string()),
  username: z.string(),
}).transform((v) => {
  return remap$(v, {
    addedAt: "added_at",
    avatarTemplate: "avatar_template",
    lastPostedAt: "last_posted_at",
    lastSeenAt: "last_seen_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owners$ {
  /** @deprecated use `Owners$inboundSchema` instead. */
  export const inboundSchema = Owners$inboundSchema;
  /** @deprecated use `Owners$outboundSchema` instead. */
  export const outboundSchema = Owners$outboundSchema;
  /** @deprecated use `Owners$Outbound` instead. */
  export type Outbound = Owners$Outbound;
}

/** @internal */
export const ListGroupMembersResponseBody$inboundSchema: z.ZodType<
  ListGroupMembersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  members: z.array(z.lazy(() => Members$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema),
  owners: z.array(z.lazy(() => Owners$inboundSchema)),
});

/** @internal */
export type ListGroupMembersResponseBody$Outbound = {
  members: Array<Members$Outbound>;
  meta: Meta$Outbound;
  owners: Array<Owners$Outbound>;
};

/** @internal */
export const ListGroupMembersResponseBody$outboundSchema: z.ZodType<
  ListGroupMembersResponseBody$Outbound,
  z.ZodTypeDef,
  ListGroupMembersResponseBody
> = z.object({
  members: z.array(z.lazy(() => Members$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema),
  owners: z.array(z.lazy(() => Owners$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGroupMembersResponseBody$ {
  /** @deprecated use `ListGroupMembersResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListGroupMembersResponseBody$inboundSchema;
  /** @deprecated use `ListGroupMembersResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListGroupMembersResponseBody$outboundSchema;
  /** @deprecated use `ListGroupMembersResponseBody$Outbound` instead. */
  export type Outbound = ListGroupMembersResponseBody$Outbound;
}
