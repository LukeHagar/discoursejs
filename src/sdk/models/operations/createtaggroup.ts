/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type CreateTagGroupRequestBody = {
    name: string;
};

export type CreateTagGroupPermissions = {};

export type TagGroup = {
    id: number;
    name: string;
    onePerTopic: boolean;
    parentTagName: Array<any>;
    permissions: CreateTagGroupPermissions;
    tagNames: Array<any>;
};

/**
 * tag group created
 */
export type CreateTagGroupResponseBody = {
    tagGroup: TagGroup;
};

/** @internal */
export const CreateTagGroupRequestBody$inboundSchema: z.ZodType<
    CreateTagGroupRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
});

/** @internal */
export type CreateTagGroupRequestBody$Outbound = {
    name: string;
};

/** @internal */
export const CreateTagGroupRequestBody$outboundSchema: z.ZodType<
    CreateTagGroupRequestBody$Outbound,
    z.ZodTypeDef,
    CreateTagGroupRequestBody
> = z.object({
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTagGroupRequestBody$ {
    /** @deprecated use `CreateTagGroupRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateTagGroupRequestBody$inboundSchema;
    /** @deprecated use `CreateTagGroupRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateTagGroupRequestBody$outboundSchema;
    /** @deprecated use `CreateTagGroupRequestBody$Outbound` instead. */
    export type Outbound = CreateTagGroupRequestBody$Outbound;
}

/** @internal */
export const CreateTagGroupPermissions$inboundSchema: z.ZodType<
    CreateTagGroupPermissions,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type CreateTagGroupPermissions$Outbound = {};

/** @internal */
export const CreateTagGroupPermissions$outboundSchema: z.ZodType<
    CreateTagGroupPermissions$Outbound,
    z.ZodTypeDef,
    CreateTagGroupPermissions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTagGroupPermissions$ {
    /** @deprecated use `CreateTagGroupPermissions$inboundSchema` instead. */
    export const inboundSchema = CreateTagGroupPermissions$inboundSchema;
    /** @deprecated use `CreateTagGroupPermissions$outboundSchema` instead. */
    export const outboundSchema = CreateTagGroupPermissions$outboundSchema;
    /** @deprecated use `CreateTagGroupPermissions$Outbound` instead. */
    export type Outbound = CreateTagGroupPermissions$Outbound;
}

/** @internal */
export const TagGroup$inboundSchema: z.ZodType<TagGroup, z.ZodTypeDef, unknown> = z
    .object({
        id: z.number().int(),
        name: z.string(),
        one_per_topic: z.boolean(),
        parent_tag_name: z.array(z.any()),
        permissions: z.lazy(() => CreateTagGroupPermissions$inboundSchema),
        tag_names: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            one_per_topic: "onePerTopic",
            parent_tag_name: "parentTagName",
            tag_names: "tagNames",
        });
    });

/** @internal */
export type TagGroup$Outbound = {
    id: number;
    name: string;
    one_per_topic: boolean;
    parent_tag_name: Array<any>;
    permissions: CreateTagGroupPermissions$Outbound;
    tag_names: Array<any>;
};

/** @internal */
export const TagGroup$outboundSchema: z.ZodType<TagGroup$Outbound, z.ZodTypeDef, TagGroup> = z
    .object({
        id: z.number().int(),
        name: z.string(),
        onePerTopic: z.boolean(),
        parentTagName: z.array(z.any()),
        permissions: z.lazy(() => CreateTagGroupPermissions$outboundSchema),
        tagNames: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            onePerTopic: "one_per_topic",
            parentTagName: "parent_tag_name",
            tagNames: "tag_names",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagGroup$ {
    /** @deprecated use `TagGroup$inboundSchema` instead. */
    export const inboundSchema = TagGroup$inboundSchema;
    /** @deprecated use `TagGroup$outboundSchema` instead. */
    export const outboundSchema = TagGroup$outboundSchema;
    /** @deprecated use `TagGroup$Outbound` instead. */
    export type Outbound = TagGroup$Outbound;
}

/** @internal */
export const CreateTagGroupResponseBody$inboundSchema: z.ZodType<
    CreateTagGroupResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        tag_group: z.lazy(() => TagGroup$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            tag_group: "tagGroup",
        });
    });

/** @internal */
export type CreateTagGroupResponseBody$Outbound = {
    tag_group: TagGroup$Outbound;
};

/** @internal */
export const CreateTagGroupResponseBody$outboundSchema: z.ZodType<
    CreateTagGroupResponseBody$Outbound,
    z.ZodTypeDef,
    CreateTagGroupResponseBody
> = z
    .object({
        tagGroup: z.lazy(() => TagGroup$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            tagGroup: "tag_group",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTagGroupResponseBody$ {
    /** @deprecated use `CreateTagGroupResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateTagGroupResponseBody$inboundSchema;
    /** @deprecated use `CreateTagGroupResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateTagGroupResponseBody$outboundSchema;
    /** @deprecated use `CreateTagGroupResponseBody$Outbound` instead. */
    export type Outbound = CreateTagGroupResponseBody$Outbound;
}
