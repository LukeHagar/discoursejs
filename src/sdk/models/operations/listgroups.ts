/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ListGroupsExtras = {
  typeFilters: Array<any>;
};

export type Groups = {
  allowMembershipRequests: boolean;
  automatic: boolean;
  bioCooked: string | null;
  bioExcerpt: string | null;
  bioRaw: string | null;
  canAdminGroup: boolean;
  canEditGroup?: boolean | undefined;
  canSeeMembers: boolean;
  defaultNotificationLevel: number;
  displayName: string;
  flairBgColor: string | null;
  flairColor: string | null;
  flairUrl: string | null;
  fullName: string | null;
  grantTrustLevel: string | null;
  hasMessages: boolean;
  id: number;
  incomingEmail: string | null;
  isGroupOwner?: boolean | undefined;
  isGroupUser?: boolean | undefined;
  membersVisibilityLevel: number;
  membershipRequestTemplate: string | null;
  mentionableLevel: number;
  messageableLevel: number;
  name: string;
  primaryGroup: boolean;
  publicAdmission: boolean;
  publicExit: boolean;
  publishReadState: boolean;
  title: string | null;
  userCount: number;
  visibilityLevel: number;
};

/**
 * response
 */
export type ListGroupsResponseBody = {
  extras: ListGroupsExtras;
  groups: Array<Groups>;
  loadMoreGroups: string;
  totalRowsGroups: number;
};

/** @internal */
export const ListGroupsExtras$inboundSchema: z.ZodType<
  ListGroupsExtras,
  z.ZodTypeDef,
  unknown
> = z.object({
  type_filters: z.array(z.any()),
}).transform((v) => {
  return remap$(v, {
    "type_filters": "typeFilters",
  });
});

/** @internal */
export type ListGroupsExtras$Outbound = {
  type_filters: Array<any>;
};

/** @internal */
export const ListGroupsExtras$outboundSchema: z.ZodType<
  ListGroupsExtras$Outbound,
  z.ZodTypeDef,
  ListGroupsExtras
> = z.object({
  typeFilters: z.array(z.any()),
}).transform((v) => {
  return remap$(v, {
    typeFilters: "type_filters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGroupsExtras$ {
  /** @deprecated use `ListGroupsExtras$inboundSchema` instead. */
  export const inboundSchema = ListGroupsExtras$inboundSchema;
  /** @deprecated use `ListGroupsExtras$outboundSchema` instead. */
  export const outboundSchema = ListGroupsExtras$outboundSchema;
  /** @deprecated use `ListGroupsExtras$Outbound` instead. */
  export type Outbound = ListGroupsExtras$Outbound;
}

/** @internal */
export const Groups$inboundSchema: z.ZodType<Groups, z.ZodTypeDef, unknown> = z
  .object({
    allow_membership_requests: z.boolean(),
    automatic: z.boolean(),
    bio_cooked: z.nullable(z.string()),
    bio_excerpt: z.nullable(z.string()),
    bio_raw: z.nullable(z.string()),
    can_admin_group: z.boolean(),
    can_edit_group: z.boolean().optional(),
    can_see_members: z.boolean(),
    default_notification_level: z.number().int(),
    display_name: z.string(),
    flair_bg_color: z.nullable(z.string()),
    flair_color: z.nullable(z.string()),
    flair_url: z.nullable(z.string()),
    full_name: z.nullable(z.string()),
    grant_trust_level: z.nullable(z.string()),
    has_messages: z.boolean(),
    id: z.number().int(),
    incoming_email: z.nullable(z.string()),
    is_group_owner: z.boolean().optional(),
    is_group_user: z.boolean().optional(),
    members_visibility_level: z.number().int(),
    membership_request_template: z.nullable(z.string()),
    mentionable_level: z.number().int(),
    messageable_level: z.number().int(),
    name: z.string(),
    primary_group: z.boolean(),
    public_admission: z.boolean(),
    public_exit: z.boolean(),
    publish_read_state: z.boolean(),
    title: z.nullable(z.string()),
    user_count: z.number().int(),
    visibility_level: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "allow_membership_requests": "allowMembershipRequests",
      "bio_cooked": "bioCooked",
      "bio_excerpt": "bioExcerpt",
      "bio_raw": "bioRaw",
      "can_admin_group": "canAdminGroup",
      "can_edit_group": "canEditGroup",
      "can_see_members": "canSeeMembers",
      "default_notification_level": "defaultNotificationLevel",
      "display_name": "displayName",
      "flair_bg_color": "flairBgColor",
      "flair_color": "flairColor",
      "flair_url": "flairUrl",
      "full_name": "fullName",
      "grant_trust_level": "grantTrustLevel",
      "has_messages": "hasMessages",
      "incoming_email": "incomingEmail",
      "is_group_owner": "isGroupOwner",
      "is_group_user": "isGroupUser",
      "members_visibility_level": "membersVisibilityLevel",
      "membership_request_template": "membershipRequestTemplate",
      "mentionable_level": "mentionableLevel",
      "messageable_level": "messageableLevel",
      "primary_group": "primaryGroup",
      "public_admission": "publicAdmission",
      "public_exit": "publicExit",
      "publish_read_state": "publishReadState",
      "user_count": "userCount",
      "visibility_level": "visibilityLevel",
    });
  });

/** @internal */
export type Groups$Outbound = {
  allow_membership_requests: boolean;
  automatic: boolean;
  bio_cooked: string | null;
  bio_excerpt: string | null;
  bio_raw: string | null;
  can_admin_group: boolean;
  can_edit_group?: boolean | undefined;
  can_see_members: boolean;
  default_notification_level: number;
  display_name: string;
  flair_bg_color: string | null;
  flair_color: string | null;
  flair_url: string | null;
  full_name: string | null;
  grant_trust_level: string | null;
  has_messages: boolean;
  id: number;
  incoming_email: string | null;
  is_group_owner?: boolean | undefined;
  is_group_user?: boolean | undefined;
  members_visibility_level: number;
  membership_request_template: string | null;
  mentionable_level: number;
  messageable_level: number;
  name: string;
  primary_group: boolean;
  public_admission: boolean;
  public_exit: boolean;
  publish_read_state: boolean;
  title: string | null;
  user_count: number;
  visibility_level: number;
};

/** @internal */
export const Groups$outboundSchema: z.ZodType<
  Groups$Outbound,
  z.ZodTypeDef,
  Groups
> = z.object({
  allowMembershipRequests: z.boolean(),
  automatic: z.boolean(),
  bioCooked: z.nullable(z.string()),
  bioExcerpt: z.nullable(z.string()),
  bioRaw: z.nullable(z.string()),
  canAdminGroup: z.boolean(),
  canEditGroup: z.boolean().optional(),
  canSeeMembers: z.boolean(),
  defaultNotificationLevel: z.number().int(),
  displayName: z.string(),
  flairBgColor: z.nullable(z.string()),
  flairColor: z.nullable(z.string()),
  flairUrl: z.nullable(z.string()),
  fullName: z.nullable(z.string()),
  grantTrustLevel: z.nullable(z.string()),
  hasMessages: z.boolean(),
  id: z.number().int(),
  incomingEmail: z.nullable(z.string()),
  isGroupOwner: z.boolean().optional(),
  isGroupUser: z.boolean().optional(),
  membersVisibilityLevel: z.number().int(),
  membershipRequestTemplate: z.nullable(z.string()),
  mentionableLevel: z.number().int(),
  messageableLevel: z.number().int(),
  name: z.string(),
  primaryGroup: z.boolean(),
  publicAdmission: z.boolean(),
  publicExit: z.boolean(),
  publishReadState: z.boolean(),
  title: z.nullable(z.string()),
  userCount: z.number().int(),
  visibilityLevel: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    allowMembershipRequests: "allow_membership_requests",
    bioCooked: "bio_cooked",
    bioExcerpt: "bio_excerpt",
    bioRaw: "bio_raw",
    canAdminGroup: "can_admin_group",
    canEditGroup: "can_edit_group",
    canSeeMembers: "can_see_members",
    defaultNotificationLevel: "default_notification_level",
    displayName: "display_name",
    flairBgColor: "flair_bg_color",
    flairColor: "flair_color",
    flairUrl: "flair_url",
    fullName: "full_name",
    grantTrustLevel: "grant_trust_level",
    hasMessages: "has_messages",
    incomingEmail: "incoming_email",
    isGroupOwner: "is_group_owner",
    isGroupUser: "is_group_user",
    membersVisibilityLevel: "members_visibility_level",
    membershipRequestTemplate: "membership_request_template",
    mentionableLevel: "mentionable_level",
    messageableLevel: "messageable_level",
    primaryGroup: "primary_group",
    publicAdmission: "public_admission",
    publicExit: "public_exit",
    publishReadState: "publish_read_state",
    userCount: "user_count",
    visibilityLevel: "visibility_level",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Groups$ {
  /** @deprecated use `Groups$inboundSchema` instead. */
  export const inboundSchema = Groups$inboundSchema;
  /** @deprecated use `Groups$outboundSchema` instead. */
  export const outboundSchema = Groups$outboundSchema;
  /** @deprecated use `Groups$Outbound` instead. */
  export type Outbound = Groups$Outbound;
}

/** @internal */
export const ListGroupsResponseBody$inboundSchema: z.ZodType<
  ListGroupsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  extras: z.lazy(() => ListGroupsExtras$inboundSchema),
  groups: z.array(z.lazy(() => Groups$inboundSchema)),
  load_more_groups: z.string(),
  total_rows_groups: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "load_more_groups": "loadMoreGroups",
    "total_rows_groups": "totalRowsGroups",
  });
});

/** @internal */
export type ListGroupsResponseBody$Outbound = {
  extras: ListGroupsExtras$Outbound;
  groups: Array<Groups$Outbound>;
  load_more_groups: string;
  total_rows_groups: number;
};

/** @internal */
export const ListGroupsResponseBody$outboundSchema: z.ZodType<
  ListGroupsResponseBody$Outbound,
  z.ZodTypeDef,
  ListGroupsResponseBody
> = z.object({
  extras: z.lazy(() => ListGroupsExtras$outboundSchema),
  groups: z.array(z.lazy(() => Groups$outboundSchema)),
  loadMoreGroups: z.string(),
  totalRowsGroups: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    loadMoreGroups: "load_more_groups",
    totalRowsGroups: "total_rows_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGroupsResponseBody$ {
  /** @deprecated use `ListGroupsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListGroupsResponseBody$inboundSchema;
  /** @deprecated use `ListGroupsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListGroupsResponseBody$outboundSchema;
  /** @deprecated use `ListGroupsResponseBody$Outbound` instead. */
  export type Outbound = ListGroupsResponseBody$Outbound;
}
