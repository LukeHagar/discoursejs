/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type CompleteMultipartRequestBody = {
    /**
     * All of the part numbers and their corresponding ETags that have been uploaded must be provided.
     */
    parts: Array<any>;
    /**
     * The unique identifier returned in the original /create-multipart request.
     */
    uniqueIdentifier: string;
};

/**
 * external upload initialized
 */
export type CompleteMultipartResponseBody = {
    dominantColor?: string | null | undefined;
    extension: string;
    filesize: number;
    height: number;
    humanFilesize: string;
    id: number;
    originalFilename: string;
    retainHours: string | null;
    shortPath: string;
    shortUrl: string;
    thumbnailHeight: number;
    thumbnailWidth: number;
    url: string;
    width: number;
};

/** @internal */
export const CompleteMultipartRequestBody$inboundSchema: z.ZodType<
    CompleteMultipartRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        parts: z.array(z.any()),
        unique_identifier: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            unique_identifier: "uniqueIdentifier",
        });
    });

/** @internal */
export type CompleteMultipartRequestBody$Outbound = {
    parts: Array<any>;
    unique_identifier: string;
};

/** @internal */
export const CompleteMultipartRequestBody$outboundSchema: z.ZodType<
    CompleteMultipartRequestBody$Outbound,
    z.ZodTypeDef,
    CompleteMultipartRequestBody
> = z
    .object({
        parts: z.array(z.any()),
        uniqueIdentifier: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            uniqueIdentifier: "unique_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMultipartRequestBody$ {
    /** @deprecated use `CompleteMultipartRequestBody$inboundSchema` instead. */
    export const inboundSchema = CompleteMultipartRequestBody$inboundSchema;
    /** @deprecated use `CompleteMultipartRequestBody$outboundSchema` instead. */
    export const outboundSchema = CompleteMultipartRequestBody$outboundSchema;
    /** @deprecated use `CompleteMultipartRequestBody$Outbound` instead. */
    export type Outbound = CompleteMultipartRequestBody$Outbound;
}

/** @internal */
export const CompleteMultipartResponseBody$inboundSchema: z.ZodType<
    CompleteMultipartResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        dominant_color: z.nullable(z.string()).optional(),
        extension: z.string(),
        filesize: z.number().int(),
        height: z.number().int(),
        human_filesize: z.string(),
        id: z.number().int(),
        original_filename: z.string(),
        retain_hours: z.nullable(z.string()),
        short_path: z.string(),
        short_url: z.string(),
        thumbnail_height: z.number().int(),
        thumbnail_width: z.number().int(),
        url: z.string(),
        width: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            dominant_color: "dominantColor",
            human_filesize: "humanFilesize",
            original_filename: "originalFilename",
            retain_hours: "retainHours",
            short_path: "shortPath",
            short_url: "shortUrl",
            thumbnail_height: "thumbnailHeight",
            thumbnail_width: "thumbnailWidth",
        });
    });

/** @internal */
export type CompleteMultipartResponseBody$Outbound = {
    dominant_color?: string | null | undefined;
    extension: string;
    filesize: number;
    height: number;
    human_filesize: string;
    id: number;
    original_filename: string;
    retain_hours: string | null;
    short_path: string;
    short_url: string;
    thumbnail_height: number;
    thumbnail_width: number;
    url: string;
    width: number;
};

/** @internal */
export const CompleteMultipartResponseBody$outboundSchema: z.ZodType<
    CompleteMultipartResponseBody$Outbound,
    z.ZodTypeDef,
    CompleteMultipartResponseBody
> = z
    .object({
        dominantColor: z.nullable(z.string()).optional(),
        extension: z.string(),
        filesize: z.number().int(),
        height: z.number().int(),
        humanFilesize: z.string(),
        id: z.number().int(),
        originalFilename: z.string(),
        retainHours: z.nullable(z.string()),
        shortPath: z.string(),
        shortUrl: z.string(),
        thumbnailHeight: z.number().int(),
        thumbnailWidth: z.number().int(),
        url: z.string(),
        width: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            dominantColor: "dominant_color",
            humanFilesize: "human_filesize",
            originalFilename: "original_filename",
            retainHours: "retain_hours",
            shortPath: "short_path",
            shortUrl: "short_url",
            thumbnailHeight: "thumbnail_height",
            thumbnailWidth: "thumbnail_width",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteMultipartResponseBody$ {
    /** @deprecated use `CompleteMultipartResponseBody$inboundSchema` instead. */
    export const inboundSchema = CompleteMultipartResponseBody$inboundSchema;
    /** @deprecated use `CompleteMultipartResponseBody$outboundSchema` instead. */
    export const outboundSchema = CompleteMultipartResponseBody$outboundSchema;
    /** @deprecated use `CompleteMultipartResponseBody$Outbound` instead. */
    export type Outbound = CompleteMultipartResponseBody$Outbound;
}
