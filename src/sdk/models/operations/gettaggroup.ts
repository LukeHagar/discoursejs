/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type GetTagGroupRequest = {
  id: string;
};

export type GetTagGroupPermissions = {
  everyone?: number | undefined;
};

export type GetTagGroupTagGroup = {
  id?: number | undefined;
  name?: string | undefined;
  onePerTopic?: boolean | undefined;
  parentTagName?: Array<any> | undefined;
  permissions?: GetTagGroupPermissions | undefined;
  tagNames?: Array<any> | undefined;
};

/**
 * notifications
 */
export type GetTagGroupResponseBody = {
  tagGroup?: GetTagGroupTagGroup | undefined;
};

/** @internal */
export const GetTagGroupRequest$inboundSchema: z.ZodType<
  GetTagGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetTagGroupRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetTagGroupRequest$outboundSchema: z.ZodType<
  GetTagGroupRequest$Outbound,
  z.ZodTypeDef,
  GetTagGroupRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagGroupRequest$ {
  /** @deprecated use `GetTagGroupRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagGroupRequest$inboundSchema;
  /** @deprecated use `GetTagGroupRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagGroupRequest$outboundSchema;
  /** @deprecated use `GetTagGroupRequest$Outbound` instead. */
  export type Outbound = GetTagGroupRequest$Outbound;
}

/** @internal */
export const GetTagGroupPermissions$inboundSchema: z.ZodType<
  GetTagGroupPermissions,
  z.ZodTypeDef,
  unknown
> = z.object({
  everyone: z.number().int().optional(),
});

/** @internal */
export type GetTagGroupPermissions$Outbound = {
  everyone?: number | undefined;
};

/** @internal */
export const GetTagGroupPermissions$outboundSchema: z.ZodType<
  GetTagGroupPermissions$Outbound,
  z.ZodTypeDef,
  GetTagGroupPermissions
> = z.object({
  everyone: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagGroupPermissions$ {
  /** @deprecated use `GetTagGroupPermissions$inboundSchema` instead. */
  export const inboundSchema = GetTagGroupPermissions$inboundSchema;
  /** @deprecated use `GetTagGroupPermissions$outboundSchema` instead. */
  export const outboundSchema = GetTagGroupPermissions$outboundSchema;
  /** @deprecated use `GetTagGroupPermissions$Outbound` instead. */
  export type Outbound = GetTagGroupPermissions$Outbound;
}

/** @internal */
export const GetTagGroupTagGroup$inboundSchema: z.ZodType<
  GetTagGroupTagGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  one_per_topic: z.boolean().optional(),
  parent_tag_name: z.array(z.any()).optional(),
  permissions: z.lazy(() => GetTagGroupPermissions$inboundSchema).optional(),
  tag_names: z.array(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "one_per_topic": "onePerTopic",
    "parent_tag_name": "parentTagName",
    "tag_names": "tagNames",
  });
});

/** @internal */
export type GetTagGroupTagGroup$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  one_per_topic?: boolean | undefined;
  parent_tag_name?: Array<any> | undefined;
  permissions?: GetTagGroupPermissions$Outbound | undefined;
  tag_names?: Array<any> | undefined;
};

/** @internal */
export const GetTagGroupTagGroup$outboundSchema: z.ZodType<
  GetTagGroupTagGroup$Outbound,
  z.ZodTypeDef,
  GetTagGroupTagGroup
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  onePerTopic: z.boolean().optional(),
  parentTagName: z.array(z.any()).optional(),
  permissions: z.lazy(() => GetTagGroupPermissions$outboundSchema).optional(),
  tagNames: z.array(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    onePerTopic: "one_per_topic",
    parentTagName: "parent_tag_name",
    tagNames: "tag_names",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagGroupTagGroup$ {
  /** @deprecated use `GetTagGroupTagGroup$inboundSchema` instead. */
  export const inboundSchema = GetTagGroupTagGroup$inboundSchema;
  /** @deprecated use `GetTagGroupTagGroup$outboundSchema` instead. */
  export const outboundSchema = GetTagGroupTagGroup$outboundSchema;
  /** @deprecated use `GetTagGroupTagGroup$Outbound` instead. */
  export type Outbound = GetTagGroupTagGroup$Outbound;
}

/** @internal */
export const GetTagGroupResponseBody$inboundSchema: z.ZodType<
  GetTagGroupResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag_group: z.lazy(() => GetTagGroupTagGroup$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tag_group": "tagGroup",
  });
});

/** @internal */
export type GetTagGroupResponseBody$Outbound = {
  tag_group?: GetTagGroupTagGroup$Outbound | undefined;
};

/** @internal */
export const GetTagGroupResponseBody$outboundSchema: z.ZodType<
  GetTagGroupResponseBody$Outbound,
  z.ZodTypeDef,
  GetTagGroupResponseBody
> = z.object({
  tagGroup: z.lazy(() => GetTagGroupTagGroup$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    tagGroup: "tag_group",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagGroupResponseBody$ {
  /** @deprecated use `GetTagGroupResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTagGroupResponseBody$inboundSchema;
  /** @deprecated use `GetTagGroupResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTagGroupResponseBody$outboundSchema;
  /** @deprecated use `GetTagGroupResponseBody$Outbound` instead. */
  export type Outbound = GetTagGroupResponseBody$Outbound;
}
