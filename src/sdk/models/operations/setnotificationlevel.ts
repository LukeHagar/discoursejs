/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const NotificationLevel = {
    Zero: "0",
    One: "1",
    Two: "2",
    Three: "3",
} as const;
export type NotificationLevel = ClosedEnum<typeof NotificationLevel>;

export type SetNotificationLevelRequestBody = {
    notificationLevel: NotificationLevel;
};

export type SetNotificationLevelRequest = {
    apiKey: string;
    apiUsername: string;
    requestBody?: SetNotificationLevelRequestBody | undefined;
    id: string;
};

/**
 * topic updated
 */
export type SetNotificationLevelResponseBody = {
    success?: string | undefined;
};

/** @internal */
export const NotificationLevel$inboundSchema: z.ZodNativeEnum<typeof NotificationLevel> =
    z.nativeEnum(NotificationLevel);

/** @internal */
export const NotificationLevel$outboundSchema: z.ZodNativeEnum<typeof NotificationLevel> =
    NotificationLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationLevel$ {
    /** @deprecated use `NotificationLevel$inboundSchema` instead. */
    export const inboundSchema = NotificationLevel$inboundSchema;
    /** @deprecated use `NotificationLevel$outboundSchema` instead. */
    export const outboundSchema = NotificationLevel$outboundSchema;
}

/** @internal */
export const SetNotificationLevelRequestBody$inboundSchema: z.ZodType<
    SetNotificationLevelRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        notification_level: NotificationLevel$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            notification_level: "notificationLevel",
        });
    });

/** @internal */
export type SetNotificationLevelRequestBody$Outbound = {
    notification_level: string;
};

/** @internal */
export const SetNotificationLevelRequestBody$outboundSchema: z.ZodType<
    SetNotificationLevelRequestBody$Outbound,
    z.ZodTypeDef,
    SetNotificationLevelRequestBody
> = z
    .object({
        notificationLevel: NotificationLevel$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            notificationLevel: "notification_level",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetNotificationLevelRequestBody$ {
    /** @deprecated use `SetNotificationLevelRequestBody$inboundSchema` instead. */
    export const inboundSchema = SetNotificationLevelRequestBody$inboundSchema;
    /** @deprecated use `SetNotificationLevelRequestBody$outboundSchema` instead. */
    export const outboundSchema = SetNotificationLevelRequestBody$outboundSchema;
    /** @deprecated use `SetNotificationLevelRequestBody$Outbound` instead. */
    export type Outbound = SetNotificationLevelRequestBody$Outbound;
}

/** @internal */
export const SetNotificationLevelRequest$inboundSchema: z.ZodType<
    SetNotificationLevelRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "Api-Key": z.string(),
        "Api-Username": z.string(),
        RequestBody: z.lazy(() => SetNotificationLevelRequestBody$inboundSchema).optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "Api-Key": "apiKey",
            "Api-Username": "apiUsername",
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type SetNotificationLevelRequest$Outbound = {
    "Api-Key": string;
    "Api-Username": string;
    RequestBody?: SetNotificationLevelRequestBody$Outbound | undefined;
    id: string;
};

/** @internal */
export const SetNotificationLevelRequest$outboundSchema: z.ZodType<
    SetNotificationLevelRequest$Outbound,
    z.ZodTypeDef,
    SetNotificationLevelRequest
> = z
    .object({
        apiKey: z.string(),
        apiUsername: z.string(),
        requestBody: z.lazy(() => SetNotificationLevelRequestBody$outboundSchema).optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            apiKey: "Api-Key",
            apiUsername: "Api-Username",
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetNotificationLevelRequest$ {
    /** @deprecated use `SetNotificationLevelRequest$inboundSchema` instead. */
    export const inboundSchema = SetNotificationLevelRequest$inboundSchema;
    /** @deprecated use `SetNotificationLevelRequest$outboundSchema` instead. */
    export const outboundSchema = SetNotificationLevelRequest$outboundSchema;
    /** @deprecated use `SetNotificationLevelRequest$Outbound` instead. */
    export type Outbound = SetNotificationLevelRequest$Outbound;
}

/** @internal */
export const SetNotificationLevelResponseBody$inboundSchema: z.ZodType<
    SetNotificationLevelResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    success: z.string().optional(),
});

/** @internal */
export type SetNotificationLevelResponseBody$Outbound = {
    success?: string | undefined;
};

/** @internal */
export const SetNotificationLevelResponseBody$outboundSchema: z.ZodType<
    SetNotificationLevelResponseBody$Outbound,
    z.ZodTypeDef,
    SetNotificationLevelResponseBody
> = z.object({
    success: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetNotificationLevelResponseBody$ {
    /** @deprecated use `SetNotificationLevelResponseBody$inboundSchema` instead. */
    export const inboundSchema = SetNotificationLevelResponseBody$inboundSchema;
    /** @deprecated use `SetNotificationLevelResponseBody$outboundSchema` instead. */
    export const outboundSchema = SetNotificationLevelResponseBody$outboundSchema;
    /** @deprecated use `SetNotificationLevelResponseBody$Outbound` instead. */
    export type Outbound = SetNotificationLevelResponseBody$Outbound;
}
