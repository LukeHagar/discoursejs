/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RemoveGroupMembersRequestBody = {
    /**
     * comma separated list
     */
    usernames?: string | undefined;
};

export type RemoveGroupMembersRequest = {
    requestBody?: RemoveGroupMembersRequestBody | undefined;
    id: number;
};

/**
 * success response
 */
export type RemoveGroupMembersResponseBody = {
    skippedUsernames: Array<any>;
    success: string;
    usernames: Array<any>;
};

/** @internal */
export const RemoveGroupMembersRequestBody$inboundSchema: z.ZodType<
    RemoveGroupMembersRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    usernames: z.string().optional(),
});

/** @internal */
export type RemoveGroupMembersRequestBody$Outbound = {
    usernames?: string | undefined;
};

/** @internal */
export const RemoveGroupMembersRequestBody$outboundSchema: z.ZodType<
    RemoveGroupMembersRequestBody$Outbound,
    z.ZodTypeDef,
    RemoveGroupMembersRequestBody
> = z.object({
    usernames: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveGroupMembersRequestBody$ {
    /** @deprecated use `RemoveGroupMembersRequestBody$inboundSchema` instead. */
    export const inboundSchema = RemoveGroupMembersRequestBody$inboundSchema;
    /** @deprecated use `RemoveGroupMembersRequestBody$outboundSchema` instead. */
    export const outboundSchema = RemoveGroupMembersRequestBody$outboundSchema;
    /** @deprecated use `RemoveGroupMembersRequestBody$Outbound` instead. */
    export type Outbound = RemoveGroupMembersRequestBody$Outbound;
}

/** @internal */
export const RemoveGroupMembersRequest$inboundSchema: z.ZodType<
    RemoveGroupMembersRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => RemoveGroupMembersRequestBody$inboundSchema).optional(),
        id: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type RemoveGroupMembersRequest$Outbound = {
    RequestBody?: RemoveGroupMembersRequestBody$Outbound | undefined;
    id: number;
};

/** @internal */
export const RemoveGroupMembersRequest$outboundSchema: z.ZodType<
    RemoveGroupMembersRequest$Outbound,
    z.ZodTypeDef,
    RemoveGroupMembersRequest
> = z
    .object({
        requestBody: z.lazy(() => RemoveGroupMembersRequestBody$outboundSchema).optional(),
        id: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveGroupMembersRequest$ {
    /** @deprecated use `RemoveGroupMembersRequest$inboundSchema` instead. */
    export const inboundSchema = RemoveGroupMembersRequest$inboundSchema;
    /** @deprecated use `RemoveGroupMembersRequest$outboundSchema` instead. */
    export const outboundSchema = RemoveGroupMembersRequest$outboundSchema;
    /** @deprecated use `RemoveGroupMembersRequest$Outbound` instead. */
    export type Outbound = RemoveGroupMembersRequest$Outbound;
}

/** @internal */
export const RemoveGroupMembersResponseBody$inboundSchema: z.ZodType<
    RemoveGroupMembersResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        skipped_usernames: z.array(z.any()),
        success: z.string(),
        usernames: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            skipped_usernames: "skippedUsernames",
        });
    });

/** @internal */
export type RemoveGroupMembersResponseBody$Outbound = {
    skipped_usernames: Array<any>;
    success: string;
    usernames: Array<any>;
};

/** @internal */
export const RemoveGroupMembersResponseBody$outboundSchema: z.ZodType<
    RemoveGroupMembersResponseBody$Outbound,
    z.ZodTypeDef,
    RemoveGroupMembersResponseBody
> = z
    .object({
        skippedUsernames: z.array(z.any()),
        success: z.string(),
        usernames: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            skippedUsernames: "skipped_usernames",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveGroupMembersResponseBody$ {
    /** @deprecated use `RemoveGroupMembersResponseBody$inboundSchema` instead. */
    export const inboundSchema = RemoveGroupMembersResponseBody$inboundSchema;
    /** @deprecated use `RemoveGroupMembersResponseBody$outboundSchema` instead. */
    export const outboundSchema = RemoveGroupMembersResponseBody$outboundSchema;
    /** @deprecated use `RemoveGroupMembersResponseBody$Outbound` instead. */
    export type Outbound = RemoveGroupMembersResponseBody$Outbound;
}
