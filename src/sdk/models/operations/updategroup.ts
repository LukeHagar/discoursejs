/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type UpdateGroupGroup = {
    /**
     * pipe|separated
     */
    automaticMembershipEmailDomains?: string | undefined;
    /**
     * About Group
     */
    bioRaw?: string | undefined;
    defaultNotificationLevel?: number | undefined;
    flairBgColor?: string | undefined;
    flairIcon?: string | undefined;
    flairUploadId?: number | undefined;
    fullName?: string | undefined;
    mutedCategoryIds?: Array<number> | undefined;
    name: string;
    /**
     * comma,separated
     */
    ownerUsernames?: string | undefined;
    primaryGroup?: boolean | undefined;
    publicAdmission?: boolean | undefined;
    publicExit?: boolean | undefined;
    regularCategoryIds?: Array<number> | undefined;
    trackingCategoryIds?: Array<number> | undefined;
    /**
     * comma,separated
     */
    usernames?: string | undefined;
    visibilityLevel?: number | undefined;
    watchingCategoryIds?: Array<number> | undefined;
    watchingFirstPostCategoryIds?: Array<number> | undefined;
};

export type UpdateGroupRequestBody = {
    group: UpdateGroupGroup;
};

export type UpdateGroupRequest = {
    requestBody?: UpdateGroupRequestBody | undefined;
    id: number;
};

/**
 * success response
 */
export type UpdateGroupResponseBody = {
    success?: string | undefined;
};

/** @internal */
export const UpdateGroupGroup$inboundSchema: z.ZodType<UpdateGroupGroup, z.ZodTypeDef, unknown> = z
    .object({
        automatic_membership_email_domains: z.string().optional(),
        bio_raw: z.string().optional(),
        default_notification_level: z.number().int().optional(),
        flair_bg_color: z.string().optional(),
        flair_icon: z.string().optional(),
        flair_upload_id: z.number().int().optional(),
        full_name: z.string().optional(),
        muted_category_ids: z.array(z.number().int()).optional(),
        name: z.string(),
        owner_usernames: z.string().optional(),
        primary_group: z.boolean().optional(),
        public_admission: z.boolean().optional(),
        public_exit: z.boolean().optional(),
        regular_category_ids: z.array(z.number().int()).optional(),
        tracking_category_ids: z.array(z.number().int()).optional(),
        usernames: z.string().optional(),
        visibility_level: z.number().int().optional(),
        watching_category_ids: z.array(z.number().int()).optional(),
        watching_first_post_category_ids: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            automatic_membership_email_domains: "automaticMembershipEmailDomains",
            bio_raw: "bioRaw",
            default_notification_level: "defaultNotificationLevel",
            flair_bg_color: "flairBgColor",
            flair_icon: "flairIcon",
            flair_upload_id: "flairUploadId",
            full_name: "fullName",
            muted_category_ids: "mutedCategoryIds",
            owner_usernames: "ownerUsernames",
            primary_group: "primaryGroup",
            public_admission: "publicAdmission",
            public_exit: "publicExit",
            regular_category_ids: "regularCategoryIds",
            tracking_category_ids: "trackingCategoryIds",
            visibility_level: "visibilityLevel",
            watching_category_ids: "watchingCategoryIds",
            watching_first_post_category_ids: "watchingFirstPostCategoryIds",
        });
    });

/** @internal */
export type UpdateGroupGroup$Outbound = {
    automatic_membership_email_domains?: string | undefined;
    bio_raw?: string | undefined;
    default_notification_level?: number | undefined;
    flair_bg_color?: string | undefined;
    flair_icon?: string | undefined;
    flair_upload_id?: number | undefined;
    full_name?: string | undefined;
    muted_category_ids?: Array<number> | undefined;
    name: string;
    owner_usernames?: string | undefined;
    primary_group?: boolean | undefined;
    public_admission?: boolean | undefined;
    public_exit?: boolean | undefined;
    regular_category_ids?: Array<number> | undefined;
    tracking_category_ids?: Array<number> | undefined;
    usernames?: string | undefined;
    visibility_level?: number | undefined;
    watching_category_ids?: Array<number> | undefined;
    watching_first_post_category_ids?: Array<number> | undefined;
};

/** @internal */
export const UpdateGroupGroup$outboundSchema: z.ZodType<
    UpdateGroupGroup$Outbound,
    z.ZodTypeDef,
    UpdateGroupGroup
> = z
    .object({
        automaticMembershipEmailDomains: z.string().optional(),
        bioRaw: z.string().optional(),
        defaultNotificationLevel: z.number().int().optional(),
        flairBgColor: z.string().optional(),
        flairIcon: z.string().optional(),
        flairUploadId: z.number().int().optional(),
        fullName: z.string().optional(),
        mutedCategoryIds: z.array(z.number().int()).optional(),
        name: z.string(),
        ownerUsernames: z.string().optional(),
        primaryGroup: z.boolean().optional(),
        publicAdmission: z.boolean().optional(),
        publicExit: z.boolean().optional(),
        regularCategoryIds: z.array(z.number().int()).optional(),
        trackingCategoryIds: z.array(z.number().int()).optional(),
        usernames: z.string().optional(),
        visibilityLevel: z.number().int().optional(),
        watchingCategoryIds: z.array(z.number().int()).optional(),
        watchingFirstPostCategoryIds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            automaticMembershipEmailDomains: "automatic_membership_email_domains",
            bioRaw: "bio_raw",
            defaultNotificationLevel: "default_notification_level",
            flairBgColor: "flair_bg_color",
            flairIcon: "flair_icon",
            flairUploadId: "flair_upload_id",
            fullName: "full_name",
            mutedCategoryIds: "muted_category_ids",
            ownerUsernames: "owner_usernames",
            primaryGroup: "primary_group",
            publicAdmission: "public_admission",
            publicExit: "public_exit",
            regularCategoryIds: "regular_category_ids",
            trackingCategoryIds: "tracking_category_ids",
            visibilityLevel: "visibility_level",
            watchingCategoryIds: "watching_category_ids",
            watchingFirstPostCategoryIds: "watching_first_post_category_ids",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupGroup$ {
    /** @deprecated use `UpdateGroupGroup$inboundSchema` instead. */
    export const inboundSchema = UpdateGroupGroup$inboundSchema;
    /** @deprecated use `UpdateGroupGroup$outboundSchema` instead. */
    export const outboundSchema = UpdateGroupGroup$outboundSchema;
    /** @deprecated use `UpdateGroupGroup$Outbound` instead. */
    export type Outbound = UpdateGroupGroup$Outbound;
}

/** @internal */
export const UpdateGroupRequestBody$inboundSchema: z.ZodType<
    UpdateGroupRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    group: z.lazy(() => UpdateGroupGroup$inboundSchema),
});

/** @internal */
export type UpdateGroupRequestBody$Outbound = {
    group: UpdateGroupGroup$Outbound;
};

/** @internal */
export const UpdateGroupRequestBody$outboundSchema: z.ZodType<
    UpdateGroupRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateGroupRequestBody
> = z.object({
    group: z.lazy(() => UpdateGroupGroup$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupRequestBody$ {
    /** @deprecated use `UpdateGroupRequestBody$inboundSchema` instead. */
    export const inboundSchema = UpdateGroupRequestBody$inboundSchema;
    /** @deprecated use `UpdateGroupRequestBody$outboundSchema` instead. */
    export const outboundSchema = UpdateGroupRequestBody$outboundSchema;
    /** @deprecated use `UpdateGroupRequestBody$Outbound` instead. */
    export type Outbound = UpdateGroupRequestBody$Outbound;
}

/** @internal */
export const UpdateGroupRequest$inboundSchema: z.ZodType<
    UpdateGroupRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => UpdateGroupRequestBody$inboundSchema).optional(),
        id: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type UpdateGroupRequest$Outbound = {
    RequestBody?: UpdateGroupRequestBody$Outbound | undefined;
    id: number;
};

/** @internal */
export const UpdateGroupRequest$outboundSchema: z.ZodType<
    UpdateGroupRequest$Outbound,
    z.ZodTypeDef,
    UpdateGroupRequest
> = z
    .object({
        requestBody: z.lazy(() => UpdateGroupRequestBody$outboundSchema).optional(),
        id: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupRequest$ {
    /** @deprecated use `UpdateGroupRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateGroupRequest$inboundSchema;
    /** @deprecated use `UpdateGroupRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateGroupRequest$outboundSchema;
    /** @deprecated use `UpdateGroupRequest$Outbound` instead. */
    export type Outbound = UpdateGroupRequest$Outbound;
}

/** @internal */
export const UpdateGroupResponseBody$inboundSchema: z.ZodType<
    UpdateGroupResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    success: z.string().optional(),
});

/** @internal */
export type UpdateGroupResponseBody$Outbound = {
    success?: string | undefined;
};

/** @internal */
export const UpdateGroupResponseBody$outboundSchema: z.ZodType<
    UpdateGroupResponseBody$Outbound,
    z.ZodTypeDef,
    UpdateGroupResponseBody
> = z.object({
    success: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupResponseBody$ {
    /** @deprecated use `UpdateGroupResponseBody$inboundSchema` instead. */
    export const inboundSchema = UpdateGroupResponseBody$inboundSchema;
    /** @deprecated use `UpdateGroupResponseBody$outboundSchema` instead. */
    export const outboundSchema = UpdateGroupResponseBody$outboundSchema;
    /** @deprecated use `UpdateGroupResponseBody$Outbound` instead. */
    export type Outbound = UpdateGroupResponseBody$Outbound;
}
