/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type LockPostRequestBody = {
  locked: string;
};

export type LockPostRequest = {
  apiKey: string;
  apiUsername: string;
  requestBody?: LockPostRequestBody | undefined;
  id: string;
};

/**
 * post updated
 */
export type LockPostResponseBody = {
  locked?: boolean | undefined;
};

/** @internal */
export const LockPostRequestBody$inboundSchema: z.ZodType<
  LockPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  locked: z.string(),
});

/** @internal */
export type LockPostRequestBody$Outbound = {
  locked: string;
};

/** @internal */
export const LockPostRequestBody$outboundSchema: z.ZodType<
  LockPostRequestBody$Outbound,
  z.ZodTypeDef,
  LockPostRequestBody
> = z.object({
  locked: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LockPostRequestBody$ {
  /** @deprecated use `LockPostRequestBody$inboundSchema` instead. */
  export const inboundSchema = LockPostRequestBody$inboundSchema;
  /** @deprecated use `LockPostRequestBody$outboundSchema` instead. */
  export const outboundSchema = LockPostRequestBody$outboundSchema;
  /** @deprecated use `LockPostRequestBody$Outbound` instead. */
  export type Outbound = LockPostRequestBody$Outbound;
}

/** @internal */
export const LockPostRequest$inboundSchema: z.ZodType<
  LockPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Api-Key": z.string(),
  "Api-Username": z.string(),
  RequestBody: z.lazy(() => LockPostRequestBody$inboundSchema).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Api-Key": "apiKey",
    "Api-Username": "apiUsername",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type LockPostRequest$Outbound = {
  "Api-Key": string;
  "Api-Username": string;
  RequestBody?: LockPostRequestBody$Outbound | undefined;
  id: string;
};

/** @internal */
export const LockPostRequest$outboundSchema: z.ZodType<
  LockPostRequest$Outbound,
  z.ZodTypeDef,
  LockPostRequest
> = z.object({
  apiKey: z.string(),
  apiUsername: z.string(),
  requestBody: z.lazy(() => LockPostRequestBody$outboundSchema).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "Api-Key",
    apiUsername: "Api-Username",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LockPostRequest$ {
  /** @deprecated use `LockPostRequest$inboundSchema` instead. */
  export const inboundSchema = LockPostRequest$inboundSchema;
  /** @deprecated use `LockPostRequest$outboundSchema` instead. */
  export const outboundSchema = LockPostRequest$outboundSchema;
  /** @deprecated use `LockPostRequest$Outbound` instead. */
  export type Outbound = LockPostRequest$Outbound;
}

/** @internal */
export const LockPostResponseBody$inboundSchema: z.ZodType<
  LockPostResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  locked: z.boolean().optional(),
});

/** @internal */
export type LockPostResponseBody$Outbound = {
  locked?: boolean | undefined;
};

/** @internal */
export const LockPostResponseBody$outboundSchema: z.ZodType<
  LockPostResponseBody$Outbound,
  z.ZodTypeDef,
  LockPostResponseBody
> = z.object({
  locked: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LockPostResponseBody$ {
  /** @deprecated use `LockPostResponseBody$inboundSchema` instead. */
  export const inboundSchema = LockPostResponseBody$inboundSchema;
  /** @deprecated use `LockPostResponseBody$outboundSchema` instead. */
  export const outboundSchema = LockPostResponseBody$outboundSchema;
  /** @deprecated use `LockPostResponseBody$Outbound` instead. */
  export type Outbound = LockPostResponseBody$Outbound;
}
